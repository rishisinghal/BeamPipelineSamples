/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sample.beam.df.shared;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeviceTelemetry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 71424923275312244L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceTelemetry\",\"namespace\":\"com.sample.beam.df.shared\",\"fields\":[{\"name\":\"faultPeriodic\",\"type\":[\"string\",\"null\"]},{\"name\":\"commMode\",\"type\":[\"string\",\"null\"]},{\"name\":\"swVersion\",\"type\":[\"string\",\"null\"]},{\"name\":\"protVersion\",\"type\":[\"string\",\"null\"]},{\"name\":\"serialNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"dataBytes\",\"type\":[\"int\",\"null\"]},{\"name\":\"siteId\",\"type\":[\"string\",\"null\"]},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"alarm\",\"type\":[\"string\",\"null\"]},{\"name\":\"status\",\"type\":[\"string\",\"null\"]},{\"name\":\"rectifierPower\",\"type\":[\"float\",\"null\"]},{\"name\":\"rectifierVolt\",\"type\":[\"float\",\"null\"]},{\"name\":\"battCapacity\",\"type\":[\"float\",\"null\"]},{\"name\":\"battCurrent\",\"type\":[\"int\",\"null\"]},{\"name\":\"rectCurrent\",\"type\":[\"float\",\"null\"]},{\"name\":\"solCurrent\",\"type\":[\"float\",\"null\"]},{\"name\":\"windCurrent\",\"type\":[\"float\",\"null\"]},{\"name\":\"battVolDc\",\"type\":[\"float\",\"null\"]},{\"name\":\"totLoadCurr\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr1\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr2\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr3\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr4\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr5\",\"type\":[\"float\",\"null\"]},{\"name\":\"loadCurr6\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainVolR\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainVolY\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainVolB\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainCurrRY\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainCurrYB\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainCurrBR\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainFreq\",\"type\":[\"float\",\"null\"]},{\"name\":\"genVolR\",\"type\":[\"float\",\"null\"]},{\"name\":\"genVolY\",\"type\":[\"float\",\"null\"]},{\"name\":\"genVolB\",\"type\":[\"float\",\"null\"]},{\"name\":\"genCurrR\",\"type\":[\"float\",\"null\"]},{\"name\":\"genCurrY\",\"type\":[\"float\",\"null\"]},{\"name\":\"genCurrB\",\"type\":[\"float\",\"null\"]},{\"name\":\"genFreq\",\"type\":[\"float\",\"null\"]},{\"name\":\"genPower\",\"type\":[\"float\",\"null\"]},{\"name\":\"svrVol\",\"type\":[\"float\",\"null\"]},{\"name\":\"svrCurr\",\"type\":[\"float\",\"null\"]},{\"name\":\"battDod\",\"type\":[\"float\",\"null\"]},{\"name\":\"battSoc\",\"type\":[\"float\",\"null\"]},{\"name\":\"shelRoomTemp\",\"type\":[\"float\",\"null\"]},{\"name\":\"shelBattTemp\",\"type\":[\"float\",\"null\"]},{\"name\":\"genFuel\",\"type\":[\"float\",\"null\"]},{\"name\":\"genBattVol\",\"type\":[\"float\",\"null\"]},{\"name\":\"mainRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"dgTotRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"dgAutoRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"dgManRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"battRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"solRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"windRunHrs\",\"type\":[\"float\",\"null\"]},{\"name\":\"battChgCycCnt\",\"type\":[\"float\",\"null\"]},{\"name\":\"battDisChgCycCnt\",\"type\":[\"float\",\"null\"]},{\"name\":\"totRectEnergy\",\"type\":[\"float\",\"null\"]},{\"name\":\"ipMainKwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"dgEnerKwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"battEnerKwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"solEnerKwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"winEnerKwn\",\"type\":[\"float\",\"null\"]},{\"name\":\"load1Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"load2Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"load3Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"load4Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"load5Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"load6Kwh\",\"type\":[\"float\",\"null\"]},{\"name\":\"totLoadEnergy\",\"type\":[\"float\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeviceTelemetry> ENCODER =
      new BinaryMessageEncoder<DeviceTelemetry>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeviceTelemetry> DECODER =
      new BinaryMessageDecoder<DeviceTelemetry>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DeviceTelemetry> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DeviceTelemetry> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeviceTelemetry>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DeviceTelemetry to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DeviceTelemetry from a ByteBuffer. */
  public static DeviceTelemetry fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence faultPeriodic;
  @Deprecated public java.lang.CharSequence commMode;
  @Deprecated public java.lang.CharSequence swVersion;
  @Deprecated public java.lang.CharSequence protVersion;
  @Deprecated public java.lang.CharSequence serialNo;
  @Deprecated public java.lang.Integer dataBytes;
  @Deprecated public java.lang.CharSequence siteId;
  @Deprecated public org.joda.time.DateTime timestamp;
  @Deprecated public java.lang.CharSequence alarm;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.lang.Float rectifierPower;
  @Deprecated public java.lang.Float rectifierVolt;
  @Deprecated public java.lang.Float battCapacity;
  @Deprecated public java.lang.Integer battCurrent;
  @Deprecated public java.lang.Float rectCurrent;
  @Deprecated public java.lang.Float solCurrent;
  @Deprecated public java.lang.Float windCurrent;
  @Deprecated public java.lang.Float battVolDc;
  @Deprecated public java.lang.Float totLoadCurr;
  @Deprecated public java.lang.Float loadCurr1;
  @Deprecated public java.lang.Float loadCurr2;
  @Deprecated public java.lang.Float loadCurr3;
  @Deprecated public java.lang.Float loadCurr4;
  @Deprecated public java.lang.Float loadCurr5;
  @Deprecated public java.lang.Float loadCurr6;
  @Deprecated public java.lang.Float mainVolR;
  @Deprecated public java.lang.Float mainVolY;
  @Deprecated public java.lang.Float mainVolB;
  @Deprecated public java.lang.Float mainCurrRY;
  @Deprecated public java.lang.Float mainCurrYB;
  @Deprecated public java.lang.Float mainCurrBR;
  @Deprecated public java.lang.Float mainFreq;
  @Deprecated public java.lang.Float genVolR;
  @Deprecated public java.lang.Float genVolY;
  @Deprecated public java.lang.Float genVolB;
  @Deprecated public java.lang.Float genCurrR;
  @Deprecated public java.lang.Float genCurrY;
  @Deprecated public java.lang.Float genCurrB;
  @Deprecated public java.lang.Float genFreq;
  @Deprecated public java.lang.Float genPower;
  @Deprecated public java.lang.Float svrVol;
  @Deprecated public java.lang.Float svrCurr;
  @Deprecated public java.lang.Float battDod;
  @Deprecated public java.lang.Float battSoc;
  @Deprecated public java.lang.Float shelRoomTemp;
  @Deprecated public java.lang.Float shelBattTemp;
  @Deprecated public java.lang.Float genFuel;
  @Deprecated public java.lang.Float genBattVol;
  @Deprecated public java.lang.Float mainRunHrs;
  @Deprecated public java.lang.Float dgTotRunHrs;
  @Deprecated public java.lang.Float dgAutoRunHrs;
  @Deprecated public java.lang.Float dgManRunHrs;
  @Deprecated public java.lang.Float battRunHrs;
  @Deprecated public java.lang.Float solRunHrs;
  @Deprecated public java.lang.Float windRunHrs;
  @Deprecated public java.lang.Float battChgCycCnt;
  @Deprecated public java.lang.Float battDisChgCycCnt;
  @Deprecated public java.lang.Float totRectEnergy;
  @Deprecated public java.lang.Float ipMainKwh;
  @Deprecated public java.lang.Float dgEnerKwh;
  @Deprecated public java.lang.Float battEnerKwh;
  @Deprecated public java.lang.Float solEnerKwh;
  @Deprecated public java.lang.Float winEnerKwn;
  @Deprecated public java.lang.Float load1Kwh;
  @Deprecated public java.lang.Float load2Kwh;
  @Deprecated public java.lang.Float load3Kwh;
  @Deprecated public java.lang.Float load4Kwh;
  @Deprecated public java.lang.Float load5Kwh;
  @Deprecated public java.lang.Float load6Kwh;
  @Deprecated public java.lang.Float totLoadEnergy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceTelemetry() {}

  /**
   * All-args constructor.
   * @param faultPeriodic The new value for faultPeriodic
   * @param commMode The new value for commMode
   * @param swVersion The new value for swVersion
   * @param protVersion The new value for protVersion
   * @param serialNo The new value for serialNo
   * @param dataBytes The new value for dataBytes
   * @param siteId The new value for siteId
   * @param timestamp The new value for timestamp
   * @param alarm The new value for alarm
   * @param status The new value for status
   * @param rectifierPower The new value for rectifierPower
   * @param rectifierVolt The new value for rectifierVolt
   * @param battCapacity The new value for battCapacity
   * @param battCurrent The new value for battCurrent
   * @param rectCurrent The new value for rectCurrent
   * @param solCurrent The new value for solCurrent
   * @param windCurrent The new value for windCurrent
   * @param battVolDc The new value for battVolDc
   * @param totLoadCurr The new value for totLoadCurr
   * @param loadCurr1 The new value for loadCurr1
   * @param loadCurr2 The new value for loadCurr2
   * @param loadCurr3 The new value for loadCurr3
   * @param loadCurr4 The new value for loadCurr4
   * @param loadCurr5 The new value for loadCurr5
   * @param loadCurr6 The new value for loadCurr6
   * @param mainVolR The new value for mainVolR
   * @param mainVolY The new value for mainVolY
   * @param mainVolB The new value for mainVolB
   * @param mainCurrRY The new value for mainCurrRY
   * @param mainCurrYB The new value for mainCurrYB
   * @param mainCurrBR The new value for mainCurrBR
   * @param mainFreq The new value for mainFreq
   * @param genVolR The new value for genVolR
   * @param genVolY The new value for genVolY
   * @param genVolB The new value for genVolB
   * @param genCurrR The new value for genCurrR
   * @param genCurrY The new value for genCurrY
   * @param genCurrB The new value for genCurrB
   * @param genFreq The new value for genFreq
   * @param genPower The new value for genPower
   * @param svrVol The new value for svrVol
   * @param svrCurr The new value for svrCurr
   * @param battDod The new value for battDod
   * @param battSoc The new value for battSoc
   * @param shelRoomTemp The new value for shelRoomTemp
   * @param shelBattTemp The new value for shelBattTemp
   * @param genFuel The new value for genFuel
   * @param genBattVol The new value for genBattVol
   * @param mainRunHrs The new value for mainRunHrs
   * @param dgTotRunHrs The new value for dgTotRunHrs
   * @param dgAutoRunHrs The new value for dgAutoRunHrs
   * @param dgManRunHrs The new value for dgManRunHrs
   * @param battRunHrs The new value for battRunHrs
   * @param solRunHrs The new value for solRunHrs
   * @param windRunHrs The new value for windRunHrs
   * @param battChgCycCnt The new value for battChgCycCnt
   * @param battDisChgCycCnt The new value for battDisChgCycCnt
   * @param totRectEnergy The new value for totRectEnergy
   * @param ipMainKwh The new value for ipMainKwh
   * @param dgEnerKwh The new value for dgEnerKwh
   * @param battEnerKwh The new value for battEnerKwh
   * @param solEnerKwh The new value for solEnerKwh
   * @param winEnerKwn The new value for winEnerKwn
   * @param load1Kwh The new value for load1Kwh
   * @param load2Kwh The new value for load2Kwh
   * @param load3Kwh The new value for load3Kwh
   * @param load4Kwh The new value for load4Kwh
   * @param load5Kwh The new value for load5Kwh
   * @param load6Kwh The new value for load6Kwh
   * @param totLoadEnergy The new value for totLoadEnergy
   */
  public DeviceTelemetry(java.lang.CharSequence faultPeriodic, java.lang.CharSequence commMode, java.lang.CharSequence swVersion, java.lang.CharSequence protVersion, java.lang.CharSequence serialNo, java.lang.Integer dataBytes, java.lang.CharSequence siteId, org.joda.time.DateTime timestamp, java.lang.CharSequence alarm, java.lang.CharSequence status, java.lang.Float rectifierPower, java.lang.Float rectifierVolt, java.lang.Float battCapacity, java.lang.Integer battCurrent, java.lang.Float rectCurrent, java.lang.Float solCurrent, java.lang.Float windCurrent, java.lang.Float battVolDc, java.lang.Float totLoadCurr, java.lang.Float loadCurr1, java.lang.Float loadCurr2, java.lang.Float loadCurr3, java.lang.Float loadCurr4, java.lang.Float loadCurr5, java.lang.Float loadCurr6, java.lang.Float mainVolR, java.lang.Float mainVolY, java.lang.Float mainVolB, java.lang.Float mainCurrRY, java.lang.Float mainCurrYB, java.lang.Float mainCurrBR, java.lang.Float mainFreq, java.lang.Float genVolR, java.lang.Float genVolY, java.lang.Float genVolB, java.lang.Float genCurrR, java.lang.Float genCurrY, java.lang.Float genCurrB, java.lang.Float genFreq, java.lang.Float genPower, java.lang.Float svrVol, java.lang.Float svrCurr, java.lang.Float battDod, java.lang.Float battSoc, java.lang.Float shelRoomTemp, java.lang.Float shelBattTemp, java.lang.Float genFuel, java.lang.Float genBattVol, java.lang.Float mainRunHrs, java.lang.Float dgTotRunHrs, java.lang.Float dgAutoRunHrs, java.lang.Float dgManRunHrs, java.lang.Float battRunHrs, java.lang.Float solRunHrs, java.lang.Float windRunHrs, java.lang.Float battChgCycCnt, java.lang.Float battDisChgCycCnt, java.lang.Float totRectEnergy, java.lang.Float ipMainKwh, java.lang.Float dgEnerKwh, java.lang.Float battEnerKwh, java.lang.Float solEnerKwh, java.lang.Float winEnerKwn, java.lang.Float load1Kwh, java.lang.Float load2Kwh, java.lang.Float load3Kwh, java.lang.Float load4Kwh, java.lang.Float load5Kwh, java.lang.Float load6Kwh, java.lang.Float totLoadEnergy) {
    this.faultPeriodic = faultPeriodic;
    this.commMode = commMode;
    this.swVersion = swVersion;
    this.protVersion = protVersion;
    this.serialNo = serialNo;
    this.dataBytes = dataBytes;
    this.siteId = siteId;
    this.timestamp = timestamp;
    this.alarm = alarm;
    this.status = status;
    this.rectifierPower = rectifierPower;
    this.rectifierVolt = rectifierVolt;
    this.battCapacity = battCapacity;
    this.battCurrent = battCurrent;
    this.rectCurrent = rectCurrent;
    this.solCurrent = solCurrent;
    this.windCurrent = windCurrent;
    this.battVolDc = battVolDc;
    this.totLoadCurr = totLoadCurr;
    this.loadCurr1 = loadCurr1;
    this.loadCurr2 = loadCurr2;
    this.loadCurr3 = loadCurr3;
    this.loadCurr4 = loadCurr4;
    this.loadCurr5 = loadCurr5;
    this.loadCurr6 = loadCurr6;
    this.mainVolR = mainVolR;
    this.mainVolY = mainVolY;
    this.mainVolB = mainVolB;
    this.mainCurrRY = mainCurrRY;
    this.mainCurrYB = mainCurrYB;
    this.mainCurrBR = mainCurrBR;
    this.mainFreq = mainFreq;
    this.genVolR = genVolR;
    this.genVolY = genVolY;
    this.genVolB = genVolB;
    this.genCurrR = genCurrR;
    this.genCurrY = genCurrY;
    this.genCurrB = genCurrB;
    this.genFreq = genFreq;
    this.genPower = genPower;
    this.svrVol = svrVol;
    this.svrCurr = svrCurr;
    this.battDod = battDod;
    this.battSoc = battSoc;
    this.shelRoomTemp = shelRoomTemp;
    this.shelBattTemp = shelBattTemp;
    this.genFuel = genFuel;
    this.genBattVol = genBattVol;
    this.mainRunHrs = mainRunHrs;
    this.dgTotRunHrs = dgTotRunHrs;
    this.dgAutoRunHrs = dgAutoRunHrs;
    this.dgManRunHrs = dgManRunHrs;
    this.battRunHrs = battRunHrs;
    this.solRunHrs = solRunHrs;
    this.windRunHrs = windRunHrs;
    this.battChgCycCnt = battChgCycCnt;
    this.battDisChgCycCnt = battDisChgCycCnt;
    this.totRectEnergy = totRectEnergy;
    this.ipMainKwh = ipMainKwh;
    this.dgEnerKwh = dgEnerKwh;
    this.battEnerKwh = battEnerKwh;
    this.solEnerKwh = solEnerKwh;
    this.winEnerKwn = winEnerKwn;
    this.load1Kwh = load1Kwh;
    this.load2Kwh = load2Kwh;
    this.load3Kwh = load3Kwh;
    this.load4Kwh = load4Kwh;
    this.load5Kwh = load5Kwh;
    this.load6Kwh = load6Kwh;
    this.totLoadEnergy = totLoadEnergy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return faultPeriodic;
    case 1: return commMode;
    case 2: return swVersion;
    case 3: return protVersion;
    case 4: return serialNo;
    case 5: return dataBytes;
    case 6: return siteId;
    case 7: return timestamp;
    case 8: return alarm;
    case 9: return status;
    case 10: return rectifierPower;
    case 11: return rectifierVolt;
    case 12: return battCapacity;
    case 13: return battCurrent;
    case 14: return rectCurrent;
    case 15: return solCurrent;
    case 16: return windCurrent;
    case 17: return battVolDc;
    case 18: return totLoadCurr;
    case 19: return loadCurr1;
    case 20: return loadCurr2;
    case 21: return loadCurr3;
    case 22: return loadCurr4;
    case 23: return loadCurr5;
    case 24: return loadCurr6;
    case 25: return mainVolR;
    case 26: return mainVolY;
    case 27: return mainVolB;
    case 28: return mainCurrRY;
    case 29: return mainCurrYB;
    case 30: return mainCurrBR;
    case 31: return mainFreq;
    case 32: return genVolR;
    case 33: return genVolY;
    case 34: return genVolB;
    case 35: return genCurrR;
    case 36: return genCurrY;
    case 37: return genCurrB;
    case 38: return genFreq;
    case 39: return genPower;
    case 40: return svrVol;
    case 41: return svrCurr;
    case 42: return battDod;
    case 43: return battSoc;
    case 44: return shelRoomTemp;
    case 45: return shelBattTemp;
    case 46: return genFuel;
    case 47: return genBattVol;
    case 48: return mainRunHrs;
    case 49: return dgTotRunHrs;
    case 50: return dgAutoRunHrs;
    case 51: return dgManRunHrs;
    case 52: return battRunHrs;
    case 53: return solRunHrs;
    case 54: return windRunHrs;
    case 55: return battChgCycCnt;
    case 56: return battDisChgCycCnt;
    case 57: return totRectEnergy;
    case 58: return ipMainKwh;
    case 59: return dgEnerKwh;
    case 60: return battEnerKwh;
    case 61: return solEnerKwh;
    case 62: return winEnerKwn;
    case 63: return load1Kwh;
    case 64: return load2Kwh;
    case 65: return load3Kwh;
    case 66: return load4Kwh;
    case 67: return load5Kwh;
    case 68: return load6Kwh;
    case 69: return totLoadEnergy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: faultPeriodic = (java.lang.CharSequence)value$; break;
    case 1: commMode = (java.lang.CharSequence)value$; break;
    case 2: swVersion = (java.lang.CharSequence)value$; break;
    case 3: protVersion = (java.lang.CharSequence)value$; break;
    case 4: serialNo = (java.lang.CharSequence)value$; break;
    case 5: dataBytes = (java.lang.Integer)value$; break;
    case 6: siteId = (java.lang.CharSequence)value$; break;
    case 7: timestamp = (org.joda.time.DateTime)value$; break;
    case 8: alarm = (java.lang.CharSequence)value$; break;
    case 9: status = (java.lang.CharSequence)value$; break;
    case 10: rectifierPower = (java.lang.Float)value$; break;
    case 11: rectifierVolt = (java.lang.Float)value$; break;
    case 12: battCapacity = (java.lang.Float)value$; break;
    case 13: battCurrent = (java.lang.Integer)value$; break;
    case 14: rectCurrent = (java.lang.Float)value$; break;
    case 15: solCurrent = (java.lang.Float)value$; break;
    case 16: windCurrent = (java.lang.Float)value$; break;
    case 17: battVolDc = (java.lang.Float)value$; break;
    case 18: totLoadCurr = (java.lang.Float)value$; break;
    case 19: loadCurr1 = (java.lang.Float)value$; break;
    case 20: loadCurr2 = (java.lang.Float)value$; break;
    case 21: loadCurr3 = (java.lang.Float)value$; break;
    case 22: loadCurr4 = (java.lang.Float)value$; break;
    case 23: loadCurr5 = (java.lang.Float)value$; break;
    case 24: loadCurr6 = (java.lang.Float)value$; break;
    case 25: mainVolR = (java.lang.Float)value$; break;
    case 26: mainVolY = (java.lang.Float)value$; break;
    case 27: mainVolB = (java.lang.Float)value$; break;
    case 28: mainCurrRY = (java.lang.Float)value$; break;
    case 29: mainCurrYB = (java.lang.Float)value$; break;
    case 30: mainCurrBR = (java.lang.Float)value$; break;
    case 31: mainFreq = (java.lang.Float)value$; break;
    case 32: genVolR = (java.lang.Float)value$; break;
    case 33: genVolY = (java.lang.Float)value$; break;
    case 34: genVolB = (java.lang.Float)value$; break;
    case 35: genCurrR = (java.lang.Float)value$; break;
    case 36: genCurrY = (java.lang.Float)value$; break;
    case 37: genCurrB = (java.lang.Float)value$; break;
    case 38: genFreq = (java.lang.Float)value$; break;
    case 39: genPower = (java.lang.Float)value$; break;
    case 40: svrVol = (java.lang.Float)value$; break;
    case 41: svrCurr = (java.lang.Float)value$; break;
    case 42: battDod = (java.lang.Float)value$; break;
    case 43: battSoc = (java.lang.Float)value$; break;
    case 44: shelRoomTemp = (java.lang.Float)value$; break;
    case 45: shelBattTemp = (java.lang.Float)value$; break;
    case 46: genFuel = (java.lang.Float)value$; break;
    case 47: genBattVol = (java.lang.Float)value$; break;
    case 48: mainRunHrs = (java.lang.Float)value$; break;
    case 49: dgTotRunHrs = (java.lang.Float)value$; break;
    case 50: dgAutoRunHrs = (java.lang.Float)value$; break;
    case 51: dgManRunHrs = (java.lang.Float)value$; break;
    case 52: battRunHrs = (java.lang.Float)value$; break;
    case 53: solRunHrs = (java.lang.Float)value$; break;
    case 54: windRunHrs = (java.lang.Float)value$; break;
    case 55: battChgCycCnt = (java.lang.Float)value$; break;
    case 56: battDisChgCycCnt = (java.lang.Float)value$; break;
    case 57: totRectEnergy = (java.lang.Float)value$; break;
    case 58: ipMainKwh = (java.lang.Float)value$; break;
    case 59: dgEnerKwh = (java.lang.Float)value$; break;
    case 60: battEnerKwh = (java.lang.Float)value$; break;
    case 61: solEnerKwh = (java.lang.Float)value$; break;
    case 62: winEnerKwn = (java.lang.Float)value$; break;
    case 63: load1Kwh = (java.lang.Float)value$; break;
    case 64: load2Kwh = (java.lang.Float)value$; break;
    case 65: load3Kwh = (java.lang.Float)value$; break;
    case 66: load4Kwh = (java.lang.Float)value$; break;
    case 67: load5Kwh = (java.lang.Float)value$; break;
    case 68: load6Kwh = (java.lang.Float)value$; break;
    case 69: totLoadEnergy = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'faultPeriodic' field.
   * @return The value of the 'faultPeriodic' field.
   */
  public java.lang.CharSequence getFaultPeriodic() {
    return faultPeriodic;
  }

  /**
   * Sets the value of the 'faultPeriodic' field.
   * @param value the value to set.
   */
  public void setFaultPeriodic(java.lang.CharSequence value) {
    this.faultPeriodic = value;
  }

  /**
   * Gets the value of the 'commMode' field.
   * @return The value of the 'commMode' field.
   */
  public java.lang.CharSequence getCommMode() {
    return commMode;
  }

  /**
   * Sets the value of the 'commMode' field.
   * @param value the value to set.
   */
  public void setCommMode(java.lang.CharSequence value) {
    this.commMode = value;
  }

  /**
   * Gets the value of the 'swVersion' field.
   * @return The value of the 'swVersion' field.
   */
  public java.lang.CharSequence getSwVersion() {
    return swVersion;
  }

  /**
   * Sets the value of the 'swVersion' field.
   * @param value the value to set.
   */
  public void setSwVersion(java.lang.CharSequence value) {
    this.swVersion = value;
  }

  /**
   * Gets the value of the 'protVersion' field.
   * @return The value of the 'protVersion' field.
   */
  public java.lang.CharSequence getProtVersion() {
    return protVersion;
  }

  /**
   * Sets the value of the 'protVersion' field.
   * @param value the value to set.
   */
  public void setProtVersion(java.lang.CharSequence value) {
    this.protVersion = value;
  }

  /**
   * Gets the value of the 'serialNo' field.
   * @return The value of the 'serialNo' field.
   */
  public java.lang.CharSequence getSerialNo() {
    return serialNo;
  }

  /**
   * Sets the value of the 'serialNo' field.
   * @param value the value to set.
   */
  public void setSerialNo(java.lang.CharSequence value) {
    this.serialNo = value;
  }

  /**
   * Gets the value of the 'dataBytes' field.
   * @return The value of the 'dataBytes' field.
   */
  public java.lang.Integer getDataBytes() {
    return dataBytes;
  }

  /**
   * Sets the value of the 'dataBytes' field.
   * @param value the value to set.
   */
  public void setDataBytes(java.lang.Integer value) {
    this.dataBytes = value;
  }

  /**
   * Gets the value of the 'siteId' field.
   * @return The value of the 'siteId' field.
   */
  public java.lang.CharSequence getSiteId() {
    return siteId;
  }

  /**
   * Sets the value of the 'siteId' field.
   * @param value the value to set.
   */
  public void setSiteId(java.lang.CharSequence value) {
    this.siteId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'alarm' field.
   * @return The value of the 'alarm' field.
   */
  public java.lang.CharSequence getAlarm() {
    return alarm;
  }

  /**
   * Sets the value of the 'alarm' field.
   * @param value the value to set.
   */
  public void setAlarm(java.lang.CharSequence value) {
    this.alarm = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'rectifierPower' field.
   * @return The value of the 'rectifierPower' field.
   */
  public java.lang.Float getRectifierPower() {
    return rectifierPower;
  }

  /**
   * Sets the value of the 'rectifierPower' field.
   * @param value the value to set.
   */
  public void setRectifierPower(java.lang.Float value) {
    this.rectifierPower = value;
  }

  /**
   * Gets the value of the 'rectifierVolt' field.
   * @return The value of the 'rectifierVolt' field.
   */
  public java.lang.Float getRectifierVolt() {
    return rectifierVolt;
  }

  /**
   * Sets the value of the 'rectifierVolt' field.
   * @param value the value to set.
   */
  public void setRectifierVolt(java.lang.Float value) {
    this.rectifierVolt = value;
  }

  /**
   * Gets the value of the 'battCapacity' field.
   * @return The value of the 'battCapacity' field.
   */
  public java.lang.Float getBattCapacity() {
    return battCapacity;
  }

  /**
   * Sets the value of the 'battCapacity' field.
   * @param value the value to set.
   */
  public void setBattCapacity(java.lang.Float value) {
    this.battCapacity = value;
  }

  /**
   * Gets the value of the 'battCurrent' field.
   * @return The value of the 'battCurrent' field.
   */
  public java.lang.Integer getBattCurrent() {
    return battCurrent;
  }

  /**
   * Sets the value of the 'battCurrent' field.
   * @param value the value to set.
   */
  public void setBattCurrent(java.lang.Integer value) {
    this.battCurrent = value;
  }

  /**
   * Gets the value of the 'rectCurrent' field.
   * @return The value of the 'rectCurrent' field.
   */
  public java.lang.Float getRectCurrent() {
    return rectCurrent;
  }

  /**
   * Sets the value of the 'rectCurrent' field.
   * @param value the value to set.
   */
  public void setRectCurrent(java.lang.Float value) {
    this.rectCurrent = value;
  }

  /**
   * Gets the value of the 'solCurrent' field.
   * @return The value of the 'solCurrent' field.
   */
  public java.lang.Float getSolCurrent() {
    return solCurrent;
  }

  /**
   * Sets the value of the 'solCurrent' field.
   * @param value the value to set.
   */
  public void setSolCurrent(java.lang.Float value) {
    this.solCurrent = value;
  }

  /**
   * Gets the value of the 'windCurrent' field.
   * @return The value of the 'windCurrent' field.
   */
  public java.lang.Float getWindCurrent() {
    return windCurrent;
  }

  /**
   * Sets the value of the 'windCurrent' field.
   * @param value the value to set.
   */
  public void setWindCurrent(java.lang.Float value) {
    this.windCurrent = value;
  }

  /**
   * Gets the value of the 'battVolDc' field.
   * @return The value of the 'battVolDc' field.
   */
  public java.lang.Float getBattVolDc() {
    return battVolDc;
  }

  /**
   * Sets the value of the 'battVolDc' field.
   * @param value the value to set.
   */
  public void setBattVolDc(java.lang.Float value) {
    this.battVolDc = value;
  }

  /**
   * Gets the value of the 'totLoadCurr' field.
   * @return The value of the 'totLoadCurr' field.
   */
  public java.lang.Float getTotLoadCurr() {
    return totLoadCurr;
  }

  /**
   * Sets the value of the 'totLoadCurr' field.
   * @param value the value to set.
   */
  public void setTotLoadCurr(java.lang.Float value) {
    this.totLoadCurr = value;
  }

  /**
   * Gets the value of the 'loadCurr1' field.
   * @return The value of the 'loadCurr1' field.
   */
  public java.lang.Float getLoadCurr1() {
    return loadCurr1;
  }

  /**
   * Sets the value of the 'loadCurr1' field.
   * @param value the value to set.
   */
  public void setLoadCurr1(java.lang.Float value) {
    this.loadCurr1 = value;
  }

  /**
   * Gets the value of the 'loadCurr2' field.
   * @return The value of the 'loadCurr2' field.
   */
  public java.lang.Float getLoadCurr2() {
    return loadCurr2;
  }

  /**
   * Sets the value of the 'loadCurr2' field.
   * @param value the value to set.
   */
  public void setLoadCurr2(java.lang.Float value) {
    this.loadCurr2 = value;
  }

  /**
   * Gets the value of the 'loadCurr3' field.
   * @return The value of the 'loadCurr3' field.
   */
  public java.lang.Float getLoadCurr3() {
    return loadCurr3;
  }

  /**
   * Sets the value of the 'loadCurr3' field.
   * @param value the value to set.
   */
  public void setLoadCurr3(java.lang.Float value) {
    this.loadCurr3 = value;
  }

  /**
   * Gets the value of the 'loadCurr4' field.
   * @return The value of the 'loadCurr4' field.
   */
  public java.lang.Float getLoadCurr4() {
    return loadCurr4;
  }

  /**
   * Sets the value of the 'loadCurr4' field.
   * @param value the value to set.
   */
  public void setLoadCurr4(java.lang.Float value) {
    this.loadCurr4 = value;
  }

  /**
   * Gets the value of the 'loadCurr5' field.
   * @return The value of the 'loadCurr5' field.
   */
  public java.lang.Float getLoadCurr5() {
    return loadCurr5;
  }

  /**
   * Sets the value of the 'loadCurr5' field.
   * @param value the value to set.
   */
  public void setLoadCurr5(java.lang.Float value) {
    this.loadCurr5 = value;
  }

  /**
   * Gets the value of the 'loadCurr6' field.
   * @return The value of the 'loadCurr6' field.
   */
  public java.lang.Float getLoadCurr6() {
    return loadCurr6;
  }

  /**
   * Sets the value of the 'loadCurr6' field.
   * @param value the value to set.
   */
  public void setLoadCurr6(java.lang.Float value) {
    this.loadCurr6 = value;
  }

  /**
   * Gets the value of the 'mainVolR' field.
   * @return The value of the 'mainVolR' field.
   */
  public java.lang.Float getMainVolR() {
    return mainVolR;
  }

  /**
   * Sets the value of the 'mainVolR' field.
   * @param value the value to set.
   */
  public void setMainVolR(java.lang.Float value) {
    this.mainVolR = value;
  }

  /**
   * Gets the value of the 'mainVolY' field.
   * @return The value of the 'mainVolY' field.
   */
  public java.lang.Float getMainVolY() {
    return mainVolY;
  }

  /**
   * Sets the value of the 'mainVolY' field.
   * @param value the value to set.
   */
  public void setMainVolY(java.lang.Float value) {
    this.mainVolY = value;
  }

  /**
   * Gets the value of the 'mainVolB' field.
   * @return The value of the 'mainVolB' field.
   */
  public java.lang.Float getMainVolB() {
    return mainVolB;
  }

  /**
   * Sets the value of the 'mainVolB' field.
   * @param value the value to set.
   */
  public void setMainVolB(java.lang.Float value) {
    this.mainVolB = value;
  }

  /**
   * Gets the value of the 'mainCurrRY' field.
   * @return The value of the 'mainCurrRY' field.
   */
  public java.lang.Float getMainCurrRY() {
    return mainCurrRY;
  }

  /**
   * Sets the value of the 'mainCurrRY' field.
   * @param value the value to set.
   */
  public void setMainCurrRY(java.lang.Float value) {
    this.mainCurrRY = value;
  }

  /**
   * Gets the value of the 'mainCurrYB' field.
   * @return The value of the 'mainCurrYB' field.
   */
  public java.lang.Float getMainCurrYB() {
    return mainCurrYB;
  }

  /**
   * Sets the value of the 'mainCurrYB' field.
   * @param value the value to set.
   */
  public void setMainCurrYB(java.lang.Float value) {
    this.mainCurrYB = value;
  }

  /**
   * Gets the value of the 'mainCurrBR' field.
   * @return The value of the 'mainCurrBR' field.
   */
  public java.lang.Float getMainCurrBR() {
    return mainCurrBR;
  }

  /**
   * Sets the value of the 'mainCurrBR' field.
   * @param value the value to set.
   */
  public void setMainCurrBR(java.lang.Float value) {
    this.mainCurrBR = value;
  }

  /**
   * Gets the value of the 'mainFreq' field.
   * @return The value of the 'mainFreq' field.
   */
  public java.lang.Float getMainFreq() {
    return mainFreq;
  }

  /**
   * Sets the value of the 'mainFreq' field.
   * @param value the value to set.
   */
  public void setMainFreq(java.lang.Float value) {
    this.mainFreq = value;
  }

  /**
   * Gets the value of the 'genVolR' field.
   * @return The value of the 'genVolR' field.
   */
  public java.lang.Float getGenVolR() {
    return genVolR;
  }

  /**
   * Sets the value of the 'genVolR' field.
   * @param value the value to set.
   */
  public void setGenVolR(java.lang.Float value) {
    this.genVolR = value;
  }

  /**
   * Gets the value of the 'genVolY' field.
   * @return The value of the 'genVolY' field.
   */
  public java.lang.Float getGenVolY() {
    return genVolY;
  }

  /**
   * Sets the value of the 'genVolY' field.
   * @param value the value to set.
   */
  public void setGenVolY(java.lang.Float value) {
    this.genVolY = value;
  }

  /**
   * Gets the value of the 'genVolB' field.
   * @return The value of the 'genVolB' field.
   */
  public java.lang.Float getGenVolB() {
    return genVolB;
  }

  /**
   * Sets the value of the 'genVolB' field.
   * @param value the value to set.
   */
  public void setGenVolB(java.lang.Float value) {
    this.genVolB = value;
  }

  /**
   * Gets the value of the 'genCurrR' field.
   * @return The value of the 'genCurrR' field.
   */
  public java.lang.Float getGenCurrR() {
    return genCurrR;
  }

  /**
   * Sets the value of the 'genCurrR' field.
   * @param value the value to set.
   */
  public void setGenCurrR(java.lang.Float value) {
    this.genCurrR = value;
  }

  /**
   * Gets the value of the 'genCurrY' field.
   * @return The value of the 'genCurrY' field.
   */
  public java.lang.Float getGenCurrY() {
    return genCurrY;
  }

  /**
   * Sets the value of the 'genCurrY' field.
   * @param value the value to set.
   */
  public void setGenCurrY(java.lang.Float value) {
    this.genCurrY = value;
  }

  /**
   * Gets the value of the 'genCurrB' field.
   * @return The value of the 'genCurrB' field.
   */
  public java.lang.Float getGenCurrB() {
    return genCurrB;
  }

  /**
   * Sets the value of the 'genCurrB' field.
   * @param value the value to set.
   */
  public void setGenCurrB(java.lang.Float value) {
    this.genCurrB = value;
  }

  /**
   * Gets the value of the 'genFreq' field.
   * @return The value of the 'genFreq' field.
   */
  public java.lang.Float getGenFreq() {
    return genFreq;
  }

  /**
   * Sets the value of the 'genFreq' field.
   * @param value the value to set.
   */
  public void setGenFreq(java.lang.Float value) {
    this.genFreq = value;
  }

  /**
   * Gets the value of the 'genPower' field.
   * @return The value of the 'genPower' field.
   */
  public java.lang.Float getGenPower() {
    return genPower;
  }

  /**
   * Sets the value of the 'genPower' field.
   * @param value the value to set.
   */
  public void setGenPower(java.lang.Float value) {
    this.genPower = value;
  }

  /**
   * Gets the value of the 'svrVol' field.
   * @return The value of the 'svrVol' field.
   */
  public java.lang.Float getSvrVol() {
    return svrVol;
  }

  /**
   * Sets the value of the 'svrVol' field.
   * @param value the value to set.
   */
  public void setSvrVol(java.lang.Float value) {
    this.svrVol = value;
  }

  /**
   * Gets the value of the 'svrCurr' field.
   * @return The value of the 'svrCurr' field.
   */
  public java.lang.Float getSvrCurr() {
    return svrCurr;
  }

  /**
   * Sets the value of the 'svrCurr' field.
   * @param value the value to set.
   */
  public void setSvrCurr(java.lang.Float value) {
    this.svrCurr = value;
  }

  /**
   * Gets the value of the 'battDod' field.
   * @return The value of the 'battDod' field.
   */
  public java.lang.Float getBattDod() {
    return battDod;
  }

  /**
   * Sets the value of the 'battDod' field.
   * @param value the value to set.
   */
  public void setBattDod(java.lang.Float value) {
    this.battDod = value;
  }

  /**
   * Gets the value of the 'battSoc' field.
   * @return The value of the 'battSoc' field.
   */
  public java.lang.Float getBattSoc() {
    return battSoc;
  }

  /**
   * Sets the value of the 'battSoc' field.
   * @param value the value to set.
   */
  public void setBattSoc(java.lang.Float value) {
    this.battSoc = value;
  }

  /**
   * Gets the value of the 'shelRoomTemp' field.
   * @return The value of the 'shelRoomTemp' field.
   */
  public java.lang.Float getShelRoomTemp() {
    return shelRoomTemp;
  }

  /**
   * Sets the value of the 'shelRoomTemp' field.
   * @param value the value to set.
   */
  public void setShelRoomTemp(java.lang.Float value) {
    this.shelRoomTemp = value;
  }

  /**
   * Gets the value of the 'shelBattTemp' field.
   * @return The value of the 'shelBattTemp' field.
   */
  public java.lang.Float getShelBattTemp() {
    return shelBattTemp;
  }

  /**
   * Sets the value of the 'shelBattTemp' field.
   * @param value the value to set.
   */
  public void setShelBattTemp(java.lang.Float value) {
    this.shelBattTemp = value;
  }

  /**
   * Gets the value of the 'genFuel' field.
   * @return The value of the 'genFuel' field.
   */
  public java.lang.Float getGenFuel() {
    return genFuel;
  }

  /**
   * Sets the value of the 'genFuel' field.
   * @param value the value to set.
   */
  public void setGenFuel(java.lang.Float value) {
    this.genFuel = value;
  }

  /**
   * Gets the value of the 'genBattVol' field.
   * @return The value of the 'genBattVol' field.
   */
  public java.lang.Float getGenBattVol() {
    return genBattVol;
  }

  /**
   * Sets the value of the 'genBattVol' field.
   * @param value the value to set.
   */
  public void setGenBattVol(java.lang.Float value) {
    this.genBattVol = value;
  }

  /**
   * Gets the value of the 'mainRunHrs' field.
   * @return The value of the 'mainRunHrs' field.
   */
  public java.lang.Float getMainRunHrs() {
    return mainRunHrs;
  }

  /**
   * Sets the value of the 'mainRunHrs' field.
   * @param value the value to set.
   */
  public void setMainRunHrs(java.lang.Float value) {
    this.mainRunHrs = value;
  }

  /**
   * Gets the value of the 'dgTotRunHrs' field.
   * @return The value of the 'dgTotRunHrs' field.
   */
  public java.lang.Float getDgTotRunHrs() {
    return dgTotRunHrs;
  }

  /**
   * Sets the value of the 'dgTotRunHrs' field.
   * @param value the value to set.
   */
  public void setDgTotRunHrs(java.lang.Float value) {
    this.dgTotRunHrs = value;
  }

  /**
   * Gets the value of the 'dgAutoRunHrs' field.
   * @return The value of the 'dgAutoRunHrs' field.
   */
  public java.lang.Float getDgAutoRunHrs() {
    return dgAutoRunHrs;
  }

  /**
   * Sets the value of the 'dgAutoRunHrs' field.
   * @param value the value to set.
   */
  public void setDgAutoRunHrs(java.lang.Float value) {
    this.dgAutoRunHrs = value;
  }

  /**
   * Gets the value of the 'dgManRunHrs' field.
   * @return The value of the 'dgManRunHrs' field.
   */
  public java.lang.Float getDgManRunHrs() {
    return dgManRunHrs;
  }

  /**
   * Sets the value of the 'dgManRunHrs' field.
   * @param value the value to set.
   */
  public void setDgManRunHrs(java.lang.Float value) {
    this.dgManRunHrs = value;
  }

  /**
   * Gets the value of the 'battRunHrs' field.
   * @return The value of the 'battRunHrs' field.
   */
  public java.lang.Float getBattRunHrs() {
    return battRunHrs;
  }

  /**
   * Sets the value of the 'battRunHrs' field.
   * @param value the value to set.
   */
  public void setBattRunHrs(java.lang.Float value) {
    this.battRunHrs = value;
  }

  /**
   * Gets the value of the 'solRunHrs' field.
   * @return The value of the 'solRunHrs' field.
   */
  public java.lang.Float getSolRunHrs() {
    return solRunHrs;
  }

  /**
   * Sets the value of the 'solRunHrs' field.
   * @param value the value to set.
   */
  public void setSolRunHrs(java.lang.Float value) {
    this.solRunHrs = value;
  }

  /**
   * Gets the value of the 'windRunHrs' field.
   * @return The value of the 'windRunHrs' field.
   */
  public java.lang.Float getWindRunHrs() {
    return windRunHrs;
  }

  /**
   * Sets the value of the 'windRunHrs' field.
   * @param value the value to set.
   */
  public void setWindRunHrs(java.lang.Float value) {
    this.windRunHrs = value;
  }

  /**
   * Gets the value of the 'battChgCycCnt' field.
   * @return The value of the 'battChgCycCnt' field.
   */
  public java.lang.Float getBattChgCycCnt() {
    return battChgCycCnt;
  }

  /**
   * Sets the value of the 'battChgCycCnt' field.
   * @param value the value to set.
   */
  public void setBattChgCycCnt(java.lang.Float value) {
    this.battChgCycCnt = value;
  }

  /**
   * Gets the value of the 'battDisChgCycCnt' field.
   * @return The value of the 'battDisChgCycCnt' field.
   */
  public java.lang.Float getBattDisChgCycCnt() {
    return battDisChgCycCnt;
  }

  /**
   * Sets the value of the 'battDisChgCycCnt' field.
   * @param value the value to set.
   */
  public void setBattDisChgCycCnt(java.lang.Float value) {
    this.battDisChgCycCnt = value;
  }

  /**
   * Gets the value of the 'totRectEnergy' field.
   * @return The value of the 'totRectEnergy' field.
   */
  public java.lang.Float getTotRectEnergy() {
    return totRectEnergy;
  }

  /**
   * Sets the value of the 'totRectEnergy' field.
   * @param value the value to set.
   */
  public void setTotRectEnergy(java.lang.Float value) {
    this.totRectEnergy = value;
  }

  /**
   * Gets the value of the 'ipMainKwh' field.
   * @return The value of the 'ipMainKwh' field.
   */
  public java.lang.Float getIpMainKwh() {
    return ipMainKwh;
  }

  /**
   * Sets the value of the 'ipMainKwh' field.
   * @param value the value to set.
   */
  public void setIpMainKwh(java.lang.Float value) {
    this.ipMainKwh = value;
  }

  /**
   * Gets the value of the 'dgEnerKwh' field.
   * @return The value of the 'dgEnerKwh' field.
   */
  public java.lang.Float getDgEnerKwh() {
    return dgEnerKwh;
  }

  /**
   * Sets the value of the 'dgEnerKwh' field.
   * @param value the value to set.
   */
  public void setDgEnerKwh(java.lang.Float value) {
    this.dgEnerKwh = value;
  }

  /**
   * Gets the value of the 'battEnerKwh' field.
   * @return The value of the 'battEnerKwh' field.
   */
  public java.lang.Float getBattEnerKwh() {
    return battEnerKwh;
  }

  /**
   * Sets the value of the 'battEnerKwh' field.
   * @param value the value to set.
   */
  public void setBattEnerKwh(java.lang.Float value) {
    this.battEnerKwh = value;
  }

  /**
   * Gets the value of the 'solEnerKwh' field.
   * @return The value of the 'solEnerKwh' field.
   */
  public java.lang.Float getSolEnerKwh() {
    return solEnerKwh;
  }

  /**
   * Sets the value of the 'solEnerKwh' field.
   * @param value the value to set.
   */
  public void setSolEnerKwh(java.lang.Float value) {
    this.solEnerKwh = value;
  }

  /**
   * Gets the value of the 'winEnerKwn' field.
   * @return The value of the 'winEnerKwn' field.
   */
  public java.lang.Float getWinEnerKwn() {
    return winEnerKwn;
  }

  /**
   * Sets the value of the 'winEnerKwn' field.
   * @param value the value to set.
   */
  public void setWinEnerKwn(java.lang.Float value) {
    this.winEnerKwn = value;
  }

  /**
   * Gets the value of the 'load1Kwh' field.
   * @return The value of the 'load1Kwh' field.
   */
  public java.lang.Float getLoad1Kwh() {
    return load1Kwh;
  }

  /**
   * Sets the value of the 'load1Kwh' field.
   * @param value the value to set.
   */
  public void setLoad1Kwh(java.lang.Float value) {
    this.load1Kwh = value;
  }

  /**
   * Gets the value of the 'load2Kwh' field.
   * @return The value of the 'load2Kwh' field.
   */
  public java.lang.Float getLoad2Kwh() {
    return load2Kwh;
  }

  /**
   * Sets the value of the 'load2Kwh' field.
   * @param value the value to set.
   */
  public void setLoad2Kwh(java.lang.Float value) {
    this.load2Kwh = value;
  }

  /**
   * Gets the value of the 'load3Kwh' field.
   * @return The value of the 'load3Kwh' field.
   */
  public java.lang.Float getLoad3Kwh() {
    return load3Kwh;
  }

  /**
   * Sets the value of the 'load3Kwh' field.
   * @param value the value to set.
   */
  public void setLoad3Kwh(java.lang.Float value) {
    this.load3Kwh = value;
  }

  /**
   * Gets the value of the 'load4Kwh' field.
   * @return The value of the 'load4Kwh' field.
   */
  public java.lang.Float getLoad4Kwh() {
    return load4Kwh;
  }

  /**
   * Sets the value of the 'load4Kwh' field.
   * @param value the value to set.
   */
  public void setLoad4Kwh(java.lang.Float value) {
    this.load4Kwh = value;
  }

  /**
   * Gets the value of the 'load5Kwh' field.
   * @return The value of the 'load5Kwh' field.
   */
  public java.lang.Float getLoad5Kwh() {
    return load5Kwh;
  }

  /**
   * Sets the value of the 'load5Kwh' field.
   * @param value the value to set.
   */
  public void setLoad5Kwh(java.lang.Float value) {
    this.load5Kwh = value;
  }

  /**
   * Gets the value of the 'load6Kwh' field.
   * @return The value of the 'load6Kwh' field.
   */
  public java.lang.Float getLoad6Kwh() {
    return load6Kwh;
  }

  /**
   * Sets the value of the 'load6Kwh' field.
   * @param value the value to set.
   */
  public void setLoad6Kwh(java.lang.Float value) {
    this.load6Kwh = value;
  }

  /**
   * Gets the value of the 'totLoadEnergy' field.
   * @return The value of the 'totLoadEnergy' field.
   */
  public java.lang.Float getTotLoadEnergy() {
    return totLoadEnergy;
  }

  /**
   * Sets the value of the 'totLoadEnergy' field.
   * @param value the value to set.
   */
  public void setTotLoadEnergy(java.lang.Float value) {
    this.totLoadEnergy = value;
  }

  /**
   * Creates a new DeviceTelemetry RecordBuilder.
   * @return A new DeviceTelemetry RecordBuilder
   */
  public static com.sample.beam.df.shared.DeviceTelemetry.Builder newBuilder() {
    return new com.sample.beam.df.shared.DeviceTelemetry.Builder();
  }

  /**
   * Creates a new DeviceTelemetry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceTelemetry RecordBuilder
   */
  public static com.sample.beam.df.shared.DeviceTelemetry.Builder newBuilder(com.sample.beam.df.shared.DeviceTelemetry.Builder other) {
    return new com.sample.beam.df.shared.DeviceTelemetry.Builder(other);
  }

  /**
   * Creates a new DeviceTelemetry RecordBuilder by copying an existing DeviceTelemetry instance.
   * @param other The existing instance to copy.
   * @return A new DeviceTelemetry RecordBuilder
   */
  public static com.sample.beam.df.shared.DeviceTelemetry.Builder newBuilder(com.sample.beam.df.shared.DeviceTelemetry other) {
    return new com.sample.beam.df.shared.DeviceTelemetry.Builder(other);
  }

  /**
   * RecordBuilder for DeviceTelemetry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceTelemetry>
    implements org.apache.avro.data.RecordBuilder<DeviceTelemetry> {

    private java.lang.CharSequence faultPeriodic;
    private java.lang.CharSequence commMode;
    private java.lang.CharSequence swVersion;
    private java.lang.CharSequence protVersion;
    private java.lang.CharSequence serialNo;
    private java.lang.Integer dataBytes;
    private java.lang.CharSequence siteId;
    private org.joda.time.DateTime timestamp;
    private java.lang.CharSequence alarm;
    private java.lang.CharSequence status;
    private java.lang.Float rectifierPower;
    private java.lang.Float rectifierVolt;
    private java.lang.Float battCapacity;
    private java.lang.Integer battCurrent;
    private java.lang.Float rectCurrent;
    private java.lang.Float solCurrent;
    private java.lang.Float windCurrent;
    private java.lang.Float battVolDc;
    private java.lang.Float totLoadCurr;
    private java.lang.Float loadCurr1;
    private java.lang.Float loadCurr2;
    private java.lang.Float loadCurr3;
    private java.lang.Float loadCurr4;
    private java.lang.Float loadCurr5;
    private java.lang.Float loadCurr6;
    private java.lang.Float mainVolR;
    private java.lang.Float mainVolY;
    private java.lang.Float mainVolB;
    private java.lang.Float mainCurrRY;
    private java.lang.Float mainCurrYB;
    private java.lang.Float mainCurrBR;
    private java.lang.Float mainFreq;
    private java.lang.Float genVolR;
    private java.lang.Float genVolY;
    private java.lang.Float genVolB;
    private java.lang.Float genCurrR;
    private java.lang.Float genCurrY;
    private java.lang.Float genCurrB;
    private java.lang.Float genFreq;
    private java.lang.Float genPower;
    private java.lang.Float svrVol;
    private java.lang.Float svrCurr;
    private java.lang.Float battDod;
    private java.lang.Float battSoc;
    private java.lang.Float shelRoomTemp;
    private java.lang.Float shelBattTemp;
    private java.lang.Float genFuel;
    private java.lang.Float genBattVol;
    private java.lang.Float mainRunHrs;
    private java.lang.Float dgTotRunHrs;
    private java.lang.Float dgAutoRunHrs;
    private java.lang.Float dgManRunHrs;
    private java.lang.Float battRunHrs;
    private java.lang.Float solRunHrs;
    private java.lang.Float windRunHrs;
    private java.lang.Float battChgCycCnt;
    private java.lang.Float battDisChgCycCnt;
    private java.lang.Float totRectEnergy;
    private java.lang.Float ipMainKwh;
    private java.lang.Float dgEnerKwh;
    private java.lang.Float battEnerKwh;
    private java.lang.Float solEnerKwh;
    private java.lang.Float winEnerKwn;
    private java.lang.Float load1Kwh;
    private java.lang.Float load2Kwh;
    private java.lang.Float load3Kwh;
    private java.lang.Float load4Kwh;
    private java.lang.Float load5Kwh;
    private java.lang.Float load6Kwh;
    private java.lang.Float totLoadEnergy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sample.beam.df.shared.DeviceTelemetry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.faultPeriodic)) {
        this.faultPeriodic = data().deepCopy(fields()[0].schema(), other.faultPeriodic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.commMode)) {
        this.commMode = data().deepCopy(fields()[1].schema(), other.commMode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.swVersion)) {
        this.swVersion = data().deepCopy(fields()[2].schema(), other.swVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.protVersion)) {
        this.protVersion = data().deepCopy(fields()[3].schema(), other.protVersion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.serialNo)) {
        this.serialNo = data().deepCopy(fields()[4].schema(), other.serialNo);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dataBytes)) {
        this.dataBytes = data().deepCopy(fields()[5].schema(), other.dataBytes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.siteId)) {
        this.siteId = data().deepCopy(fields()[6].schema(), other.siteId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.alarm)) {
        this.alarm = data().deepCopy(fields()[8].schema(), other.alarm);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rectifierPower)) {
        this.rectifierPower = data().deepCopy(fields()[10].schema(), other.rectifierPower);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rectifierVolt)) {
        this.rectifierVolt = data().deepCopy(fields()[11].schema(), other.rectifierVolt);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.battCapacity)) {
        this.battCapacity = data().deepCopy(fields()[12].schema(), other.battCapacity);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.battCurrent)) {
        this.battCurrent = data().deepCopy(fields()[13].schema(), other.battCurrent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.rectCurrent)) {
        this.rectCurrent = data().deepCopy(fields()[14].schema(), other.rectCurrent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.solCurrent)) {
        this.solCurrent = data().deepCopy(fields()[15].schema(), other.solCurrent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.windCurrent)) {
        this.windCurrent = data().deepCopy(fields()[16].schema(), other.windCurrent);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.battVolDc)) {
        this.battVolDc = data().deepCopy(fields()[17].schema(), other.battVolDc);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.totLoadCurr)) {
        this.totLoadCurr = data().deepCopy(fields()[18].schema(), other.totLoadCurr);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.loadCurr1)) {
        this.loadCurr1 = data().deepCopy(fields()[19].schema(), other.loadCurr1);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.loadCurr2)) {
        this.loadCurr2 = data().deepCopy(fields()[20].schema(), other.loadCurr2);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.loadCurr3)) {
        this.loadCurr3 = data().deepCopy(fields()[21].schema(), other.loadCurr3);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.loadCurr4)) {
        this.loadCurr4 = data().deepCopy(fields()[22].schema(), other.loadCurr4);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.loadCurr5)) {
        this.loadCurr5 = data().deepCopy(fields()[23].schema(), other.loadCurr5);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.loadCurr6)) {
        this.loadCurr6 = data().deepCopy(fields()[24].schema(), other.loadCurr6);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.mainVolR)) {
        this.mainVolR = data().deepCopy(fields()[25].schema(), other.mainVolR);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.mainVolY)) {
        this.mainVolY = data().deepCopy(fields()[26].schema(), other.mainVolY);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.mainVolB)) {
        this.mainVolB = data().deepCopy(fields()[27].schema(), other.mainVolB);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.mainCurrRY)) {
        this.mainCurrRY = data().deepCopy(fields()[28].schema(), other.mainCurrRY);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.mainCurrYB)) {
        this.mainCurrYB = data().deepCopy(fields()[29].schema(), other.mainCurrYB);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.mainCurrBR)) {
        this.mainCurrBR = data().deepCopy(fields()[30].schema(), other.mainCurrBR);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.mainFreq)) {
        this.mainFreq = data().deepCopy(fields()[31].schema(), other.mainFreq);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.genVolR)) {
        this.genVolR = data().deepCopy(fields()[32].schema(), other.genVolR);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.genVolY)) {
        this.genVolY = data().deepCopy(fields()[33].schema(), other.genVolY);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.genVolB)) {
        this.genVolB = data().deepCopy(fields()[34].schema(), other.genVolB);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.genCurrR)) {
        this.genCurrR = data().deepCopy(fields()[35].schema(), other.genCurrR);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.genCurrY)) {
        this.genCurrY = data().deepCopy(fields()[36].schema(), other.genCurrY);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.genCurrB)) {
        this.genCurrB = data().deepCopy(fields()[37].schema(), other.genCurrB);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.genFreq)) {
        this.genFreq = data().deepCopy(fields()[38].schema(), other.genFreq);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.genPower)) {
        this.genPower = data().deepCopy(fields()[39].schema(), other.genPower);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.svrVol)) {
        this.svrVol = data().deepCopy(fields()[40].schema(), other.svrVol);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.svrCurr)) {
        this.svrCurr = data().deepCopy(fields()[41].schema(), other.svrCurr);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.battDod)) {
        this.battDod = data().deepCopy(fields()[42].schema(), other.battDod);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.battSoc)) {
        this.battSoc = data().deepCopy(fields()[43].schema(), other.battSoc);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.shelRoomTemp)) {
        this.shelRoomTemp = data().deepCopy(fields()[44].schema(), other.shelRoomTemp);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.shelBattTemp)) {
        this.shelBattTemp = data().deepCopy(fields()[45].schema(), other.shelBattTemp);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.genFuel)) {
        this.genFuel = data().deepCopy(fields()[46].schema(), other.genFuel);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.genBattVol)) {
        this.genBattVol = data().deepCopy(fields()[47].schema(), other.genBattVol);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.mainRunHrs)) {
        this.mainRunHrs = data().deepCopy(fields()[48].schema(), other.mainRunHrs);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.dgTotRunHrs)) {
        this.dgTotRunHrs = data().deepCopy(fields()[49].schema(), other.dgTotRunHrs);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.dgAutoRunHrs)) {
        this.dgAutoRunHrs = data().deepCopy(fields()[50].schema(), other.dgAutoRunHrs);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.dgManRunHrs)) {
        this.dgManRunHrs = data().deepCopy(fields()[51].schema(), other.dgManRunHrs);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.battRunHrs)) {
        this.battRunHrs = data().deepCopy(fields()[52].schema(), other.battRunHrs);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.solRunHrs)) {
        this.solRunHrs = data().deepCopy(fields()[53].schema(), other.solRunHrs);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.windRunHrs)) {
        this.windRunHrs = data().deepCopy(fields()[54].schema(), other.windRunHrs);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.battChgCycCnt)) {
        this.battChgCycCnt = data().deepCopy(fields()[55].schema(), other.battChgCycCnt);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.battDisChgCycCnt)) {
        this.battDisChgCycCnt = data().deepCopy(fields()[56].schema(), other.battDisChgCycCnt);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.totRectEnergy)) {
        this.totRectEnergy = data().deepCopy(fields()[57].schema(), other.totRectEnergy);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.ipMainKwh)) {
        this.ipMainKwh = data().deepCopy(fields()[58].schema(), other.ipMainKwh);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.dgEnerKwh)) {
        this.dgEnerKwh = data().deepCopy(fields()[59].schema(), other.dgEnerKwh);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.battEnerKwh)) {
        this.battEnerKwh = data().deepCopy(fields()[60].schema(), other.battEnerKwh);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.solEnerKwh)) {
        this.solEnerKwh = data().deepCopy(fields()[61].schema(), other.solEnerKwh);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.winEnerKwn)) {
        this.winEnerKwn = data().deepCopy(fields()[62].schema(), other.winEnerKwn);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.load1Kwh)) {
        this.load1Kwh = data().deepCopy(fields()[63].schema(), other.load1Kwh);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.load2Kwh)) {
        this.load2Kwh = data().deepCopy(fields()[64].schema(), other.load2Kwh);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.load3Kwh)) {
        this.load3Kwh = data().deepCopy(fields()[65].schema(), other.load3Kwh);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.load4Kwh)) {
        this.load4Kwh = data().deepCopy(fields()[66].schema(), other.load4Kwh);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.load5Kwh)) {
        this.load5Kwh = data().deepCopy(fields()[67].schema(), other.load5Kwh);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.load6Kwh)) {
        this.load6Kwh = data().deepCopy(fields()[68].schema(), other.load6Kwh);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.totLoadEnergy)) {
        this.totLoadEnergy = data().deepCopy(fields()[69].schema(), other.totLoadEnergy);
        fieldSetFlags()[69] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceTelemetry instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sample.beam.df.shared.DeviceTelemetry other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.faultPeriodic)) {
        this.faultPeriodic = data().deepCopy(fields()[0].schema(), other.faultPeriodic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.commMode)) {
        this.commMode = data().deepCopy(fields()[1].schema(), other.commMode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.swVersion)) {
        this.swVersion = data().deepCopy(fields()[2].schema(), other.swVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.protVersion)) {
        this.protVersion = data().deepCopy(fields()[3].schema(), other.protVersion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.serialNo)) {
        this.serialNo = data().deepCopy(fields()[4].schema(), other.serialNo);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dataBytes)) {
        this.dataBytes = data().deepCopy(fields()[5].schema(), other.dataBytes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.siteId)) {
        this.siteId = data().deepCopy(fields()[6].schema(), other.siteId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.alarm)) {
        this.alarm = data().deepCopy(fields()[8].schema(), other.alarm);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rectifierPower)) {
        this.rectifierPower = data().deepCopy(fields()[10].schema(), other.rectifierPower);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rectifierVolt)) {
        this.rectifierVolt = data().deepCopy(fields()[11].schema(), other.rectifierVolt);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.battCapacity)) {
        this.battCapacity = data().deepCopy(fields()[12].schema(), other.battCapacity);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.battCurrent)) {
        this.battCurrent = data().deepCopy(fields()[13].schema(), other.battCurrent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.rectCurrent)) {
        this.rectCurrent = data().deepCopy(fields()[14].schema(), other.rectCurrent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.solCurrent)) {
        this.solCurrent = data().deepCopy(fields()[15].schema(), other.solCurrent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.windCurrent)) {
        this.windCurrent = data().deepCopy(fields()[16].schema(), other.windCurrent);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.battVolDc)) {
        this.battVolDc = data().deepCopy(fields()[17].schema(), other.battVolDc);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.totLoadCurr)) {
        this.totLoadCurr = data().deepCopy(fields()[18].schema(), other.totLoadCurr);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.loadCurr1)) {
        this.loadCurr1 = data().deepCopy(fields()[19].schema(), other.loadCurr1);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.loadCurr2)) {
        this.loadCurr2 = data().deepCopy(fields()[20].schema(), other.loadCurr2);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.loadCurr3)) {
        this.loadCurr3 = data().deepCopy(fields()[21].schema(), other.loadCurr3);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.loadCurr4)) {
        this.loadCurr4 = data().deepCopy(fields()[22].schema(), other.loadCurr4);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.loadCurr5)) {
        this.loadCurr5 = data().deepCopy(fields()[23].schema(), other.loadCurr5);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.loadCurr6)) {
        this.loadCurr6 = data().deepCopy(fields()[24].schema(), other.loadCurr6);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.mainVolR)) {
        this.mainVolR = data().deepCopy(fields()[25].schema(), other.mainVolR);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.mainVolY)) {
        this.mainVolY = data().deepCopy(fields()[26].schema(), other.mainVolY);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.mainVolB)) {
        this.mainVolB = data().deepCopy(fields()[27].schema(), other.mainVolB);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.mainCurrRY)) {
        this.mainCurrRY = data().deepCopy(fields()[28].schema(), other.mainCurrRY);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.mainCurrYB)) {
        this.mainCurrYB = data().deepCopy(fields()[29].schema(), other.mainCurrYB);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.mainCurrBR)) {
        this.mainCurrBR = data().deepCopy(fields()[30].schema(), other.mainCurrBR);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.mainFreq)) {
        this.mainFreq = data().deepCopy(fields()[31].schema(), other.mainFreq);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.genVolR)) {
        this.genVolR = data().deepCopy(fields()[32].schema(), other.genVolR);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.genVolY)) {
        this.genVolY = data().deepCopy(fields()[33].schema(), other.genVolY);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.genVolB)) {
        this.genVolB = data().deepCopy(fields()[34].schema(), other.genVolB);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.genCurrR)) {
        this.genCurrR = data().deepCopy(fields()[35].schema(), other.genCurrR);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.genCurrY)) {
        this.genCurrY = data().deepCopy(fields()[36].schema(), other.genCurrY);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.genCurrB)) {
        this.genCurrB = data().deepCopy(fields()[37].schema(), other.genCurrB);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.genFreq)) {
        this.genFreq = data().deepCopy(fields()[38].schema(), other.genFreq);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.genPower)) {
        this.genPower = data().deepCopy(fields()[39].schema(), other.genPower);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.svrVol)) {
        this.svrVol = data().deepCopy(fields()[40].schema(), other.svrVol);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.svrCurr)) {
        this.svrCurr = data().deepCopy(fields()[41].schema(), other.svrCurr);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.battDod)) {
        this.battDod = data().deepCopy(fields()[42].schema(), other.battDod);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.battSoc)) {
        this.battSoc = data().deepCopy(fields()[43].schema(), other.battSoc);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.shelRoomTemp)) {
        this.shelRoomTemp = data().deepCopy(fields()[44].schema(), other.shelRoomTemp);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.shelBattTemp)) {
        this.shelBattTemp = data().deepCopy(fields()[45].schema(), other.shelBattTemp);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.genFuel)) {
        this.genFuel = data().deepCopy(fields()[46].schema(), other.genFuel);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.genBattVol)) {
        this.genBattVol = data().deepCopy(fields()[47].schema(), other.genBattVol);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.mainRunHrs)) {
        this.mainRunHrs = data().deepCopy(fields()[48].schema(), other.mainRunHrs);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.dgTotRunHrs)) {
        this.dgTotRunHrs = data().deepCopy(fields()[49].schema(), other.dgTotRunHrs);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.dgAutoRunHrs)) {
        this.dgAutoRunHrs = data().deepCopy(fields()[50].schema(), other.dgAutoRunHrs);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.dgManRunHrs)) {
        this.dgManRunHrs = data().deepCopy(fields()[51].schema(), other.dgManRunHrs);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.battRunHrs)) {
        this.battRunHrs = data().deepCopy(fields()[52].schema(), other.battRunHrs);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.solRunHrs)) {
        this.solRunHrs = data().deepCopy(fields()[53].schema(), other.solRunHrs);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.windRunHrs)) {
        this.windRunHrs = data().deepCopy(fields()[54].schema(), other.windRunHrs);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.battChgCycCnt)) {
        this.battChgCycCnt = data().deepCopy(fields()[55].schema(), other.battChgCycCnt);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.battDisChgCycCnt)) {
        this.battDisChgCycCnt = data().deepCopy(fields()[56].schema(), other.battDisChgCycCnt);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.totRectEnergy)) {
        this.totRectEnergy = data().deepCopy(fields()[57].schema(), other.totRectEnergy);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.ipMainKwh)) {
        this.ipMainKwh = data().deepCopy(fields()[58].schema(), other.ipMainKwh);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.dgEnerKwh)) {
        this.dgEnerKwh = data().deepCopy(fields()[59].schema(), other.dgEnerKwh);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.battEnerKwh)) {
        this.battEnerKwh = data().deepCopy(fields()[60].schema(), other.battEnerKwh);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.solEnerKwh)) {
        this.solEnerKwh = data().deepCopy(fields()[61].schema(), other.solEnerKwh);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.winEnerKwn)) {
        this.winEnerKwn = data().deepCopy(fields()[62].schema(), other.winEnerKwn);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.load1Kwh)) {
        this.load1Kwh = data().deepCopy(fields()[63].schema(), other.load1Kwh);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.load2Kwh)) {
        this.load2Kwh = data().deepCopy(fields()[64].schema(), other.load2Kwh);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.load3Kwh)) {
        this.load3Kwh = data().deepCopy(fields()[65].schema(), other.load3Kwh);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.load4Kwh)) {
        this.load4Kwh = data().deepCopy(fields()[66].schema(), other.load4Kwh);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.load5Kwh)) {
        this.load5Kwh = data().deepCopy(fields()[67].schema(), other.load5Kwh);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.load6Kwh)) {
        this.load6Kwh = data().deepCopy(fields()[68].schema(), other.load6Kwh);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.totLoadEnergy)) {
        this.totLoadEnergy = data().deepCopy(fields()[69].schema(), other.totLoadEnergy);
        fieldSetFlags()[69] = true;
      }
    }

    /**
      * Gets the value of the 'faultPeriodic' field.
      * @return The value.
      */
    public java.lang.CharSequence getFaultPeriodic() {
      return faultPeriodic;
    }

    /**
      * Sets the value of the 'faultPeriodic' field.
      * @param value The value of 'faultPeriodic'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setFaultPeriodic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.faultPeriodic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'faultPeriodic' field has been set.
      * @return True if the 'faultPeriodic' field has been set, false otherwise.
      */
    public boolean hasFaultPeriodic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'faultPeriodic' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearFaultPeriodic() {
      faultPeriodic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'commMode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommMode() {
      return commMode;
    }

    /**
      * Sets the value of the 'commMode' field.
      * @param value The value of 'commMode'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setCommMode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.commMode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'commMode' field has been set.
      * @return True if the 'commMode' field has been set, false otherwise.
      */
    public boolean hasCommMode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'commMode' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearCommMode() {
      commMode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'swVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getSwVersion() {
      return swVersion;
    }

    /**
      * Sets the value of the 'swVersion' field.
      * @param value The value of 'swVersion'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSwVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.swVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'swVersion' field has been set.
      * @return True if the 'swVersion' field has been set, false otherwise.
      */
    public boolean hasSwVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'swVersion' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSwVersion() {
      swVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'protVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getProtVersion() {
      return protVersion;
    }

    /**
      * Sets the value of the 'protVersion' field.
      * @param value The value of 'protVersion'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setProtVersion(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.protVersion = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'protVersion' field has been set.
      * @return True if the 'protVersion' field has been set, false otherwise.
      */
    public boolean hasProtVersion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'protVersion' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearProtVersion() {
      protVersion = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'serialNo' field.
      * @return The value.
      */
    public java.lang.CharSequence getSerialNo() {
      return serialNo;
    }

    /**
      * Sets the value of the 'serialNo' field.
      * @param value The value of 'serialNo'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSerialNo(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.serialNo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'serialNo' field has been set.
      * @return True if the 'serialNo' field has been set, false otherwise.
      */
    public boolean hasSerialNo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'serialNo' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSerialNo() {
      serialNo = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataBytes' field.
      * @return The value.
      */
    public java.lang.Integer getDataBytes() {
      return dataBytes;
    }

    /**
      * Sets the value of the 'dataBytes' field.
      * @param value The value of 'dataBytes'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setDataBytes(java.lang.Integer value) {
      validate(fields()[5], value);
      this.dataBytes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dataBytes' field has been set.
      * @return True if the 'dataBytes' field has been set, false otherwise.
      */
    public boolean hasDataBytes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dataBytes' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearDataBytes() {
      dataBytes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'siteId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSiteId() {
      return siteId;
    }

    /**
      * Sets the value of the 'siteId' field.
      * @param value The value of 'siteId'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSiteId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.siteId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'siteId' field has been set.
      * @return True if the 'siteId' field has been set, false otherwise.
      */
    public boolean hasSiteId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'siteId' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSiteId() {
      siteId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'alarm' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlarm() {
      return alarm;
    }

    /**
      * Sets the value of the 'alarm' field.
      * @param value The value of 'alarm'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setAlarm(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.alarm = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'alarm' field has been set.
      * @return True if the 'alarm' field has been set, false otherwise.
      */
    public boolean hasAlarm() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'alarm' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearAlarm() {
      alarm = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.status = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearStatus() {
      status = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'rectifierPower' field.
      * @return The value.
      */
    public java.lang.Float getRectifierPower() {
      return rectifierPower;
    }

    /**
      * Sets the value of the 'rectifierPower' field.
      * @param value The value of 'rectifierPower'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setRectifierPower(java.lang.Float value) {
      validate(fields()[10], value);
      this.rectifierPower = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'rectifierPower' field has been set.
      * @return True if the 'rectifierPower' field has been set, false otherwise.
      */
    public boolean hasRectifierPower() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'rectifierPower' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearRectifierPower() {
      rectifierPower = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'rectifierVolt' field.
      * @return The value.
      */
    public java.lang.Float getRectifierVolt() {
      return rectifierVolt;
    }

    /**
      * Sets the value of the 'rectifierVolt' field.
      * @param value The value of 'rectifierVolt'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setRectifierVolt(java.lang.Float value) {
      validate(fields()[11], value);
      this.rectifierVolt = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'rectifierVolt' field has been set.
      * @return True if the 'rectifierVolt' field has been set, false otherwise.
      */
    public boolean hasRectifierVolt() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'rectifierVolt' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearRectifierVolt() {
      rectifierVolt = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'battCapacity' field.
      * @return The value.
      */
    public java.lang.Float getBattCapacity() {
      return battCapacity;
    }

    /**
      * Sets the value of the 'battCapacity' field.
      * @param value The value of 'battCapacity'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattCapacity(java.lang.Float value) {
      validate(fields()[12], value);
      this.battCapacity = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'battCapacity' field has been set.
      * @return True if the 'battCapacity' field has been set, false otherwise.
      */
    public boolean hasBattCapacity() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'battCapacity' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattCapacity() {
      battCapacity = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'battCurrent' field.
      * @return The value.
      */
    public java.lang.Integer getBattCurrent() {
      return battCurrent;
    }

    /**
      * Sets the value of the 'battCurrent' field.
      * @param value The value of 'battCurrent'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattCurrent(java.lang.Integer value) {
      validate(fields()[13], value);
      this.battCurrent = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'battCurrent' field has been set.
      * @return True if the 'battCurrent' field has been set, false otherwise.
      */
    public boolean hasBattCurrent() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'battCurrent' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattCurrent() {
      battCurrent = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'rectCurrent' field.
      * @return The value.
      */
    public java.lang.Float getRectCurrent() {
      return rectCurrent;
    }

    /**
      * Sets the value of the 'rectCurrent' field.
      * @param value The value of 'rectCurrent'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setRectCurrent(java.lang.Float value) {
      validate(fields()[14], value);
      this.rectCurrent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'rectCurrent' field has been set.
      * @return True if the 'rectCurrent' field has been set, false otherwise.
      */
    public boolean hasRectCurrent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'rectCurrent' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearRectCurrent() {
      rectCurrent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'solCurrent' field.
      * @return The value.
      */
    public java.lang.Float getSolCurrent() {
      return solCurrent;
    }

    /**
      * Sets the value of the 'solCurrent' field.
      * @param value The value of 'solCurrent'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSolCurrent(java.lang.Float value) {
      validate(fields()[15], value);
      this.solCurrent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'solCurrent' field has been set.
      * @return True if the 'solCurrent' field has been set, false otherwise.
      */
    public boolean hasSolCurrent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'solCurrent' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSolCurrent() {
      solCurrent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'windCurrent' field.
      * @return The value.
      */
    public java.lang.Float getWindCurrent() {
      return windCurrent;
    }

    /**
      * Sets the value of the 'windCurrent' field.
      * @param value The value of 'windCurrent'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setWindCurrent(java.lang.Float value) {
      validate(fields()[16], value);
      this.windCurrent = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'windCurrent' field has been set.
      * @return True if the 'windCurrent' field has been set, false otherwise.
      */
    public boolean hasWindCurrent() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'windCurrent' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearWindCurrent() {
      windCurrent = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'battVolDc' field.
      * @return The value.
      */
    public java.lang.Float getBattVolDc() {
      return battVolDc;
    }

    /**
      * Sets the value of the 'battVolDc' field.
      * @param value The value of 'battVolDc'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattVolDc(java.lang.Float value) {
      validate(fields()[17], value);
      this.battVolDc = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'battVolDc' field has been set.
      * @return True if the 'battVolDc' field has been set, false otherwise.
      */
    public boolean hasBattVolDc() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'battVolDc' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattVolDc() {
      battVolDc = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'totLoadCurr' field.
      * @return The value.
      */
    public java.lang.Float getTotLoadCurr() {
      return totLoadCurr;
    }

    /**
      * Sets the value of the 'totLoadCurr' field.
      * @param value The value of 'totLoadCurr'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setTotLoadCurr(java.lang.Float value) {
      validate(fields()[18], value);
      this.totLoadCurr = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'totLoadCurr' field has been set.
      * @return True if the 'totLoadCurr' field has been set, false otherwise.
      */
    public boolean hasTotLoadCurr() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'totLoadCurr' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearTotLoadCurr() {
      totLoadCurr = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr1' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr1() {
      return loadCurr1;
    }

    /**
      * Sets the value of the 'loadCurr1' field.
      * @param value The value of 'loadCurr1'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr1(java.lang.Float value) {
      validate(fields()[19], value);
      this.loadCurr1 = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr1' field has been set.
      * @return True if the 'loadCurr1' field has been set, false otherwise.
      */
    public boolean hasLoadCurr1() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'loadCurr1' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr1() {
      loadCurr1 = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr2' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr2() {
      return loadCurr2;
    }

    /**
      * Sets the value of the 'loadCurr2' field.
      * @param value The value of 'loadCurr2'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr2(java.lang.Float value) {
      validate(fields()[20], value);
      this.loadCurr2 = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr2' field has been set.
      * @return True if the 'loadCurr2' field has been set, false otherwise.
      */
    public boolean hasLoadCurr2() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'loadCurr2' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr2() {
      loadCurr2 = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr3' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr3() {
      return loadCurr3;
    }

    /**
      * Sets the value of the 'loadCurr3' field.
      * @param value The value of 'loadCurr3'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr3(java.lang.Float value) {
      validate(fields()[21], value);
      this.loadCurr3 = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr3' field has been set.
      * @return True if the 'loadCurr3' field has been set, false otherwise.
      */
    public boolean hasLoadCurr3() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'loadCurr3' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr3() {
      loadCurr3 = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr4' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr4() {
      return loadCurr4;
    }

    /**
      * Sets the value of the 'loadCurr4' field.
      * @param value The value of 'loadCurr4'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr4(java.lang.Float value) {
      validate(fields()[22], value);
      this.loadCurr4 = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr4' field has been set.
      * @return True if the 'loadCurr4' field has been set, false otherwise.
      */
    public boolean hasLoadCurr4() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'loadCurr4' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr4() {
      loadCurr4 = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr5' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr5() {
      return loadCurr5;
    }

    /**
      * Sets the value of the 'loadCurr5' field.
      * @param value The value of 'loadCurr5'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr5(java.lang.Float value) {
      validate(fields()[23], value);
      this.loadCurr5 = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr5' field has been set.
      * @return True if the 'loadCurr5' field has been set, false otherwise.
      */
    public boolean hasLoadCurr5() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'loadCurr5' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr5() {
      loadCurr5 = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'loadCurr6' field.
      * @return The value.
      */
    public java.lang.Float getLoadCurr6() {
      return loadCurr6;
    }

    /**
      * Sets the value of the 'loadCurr6' field.
      * @param value The value of 'loadCurr6'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoadCurr6(java.lang.Float value) {
      validate(fields()[24], value);
      this.loadCurr6 = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'loadCurr6' field has been set.
      * @return True if the 'loadCurr6' field has been set, false otherwise.
      */
    public boolean hasLoadCurr6() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'loadCurr6' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoadCurr6() {
      loadCurr6 = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainVolR' field.
      * @return The value.
      */
    public java.lang.Float getMainVolR() {
      return mainVolR;
    }

    /**
      * Sets the value of the 'mainVolR' field.
      * @param value The value of 'mainVolR'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainVolR(java.lang.Float value) {
      validate(fields()[25], value);
      this.mainVolR = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'mainVolR' field has been set.
      * @return True if the 'mainVolR' field has been set, false otherwise.
      */
    public boolean hasMainVolR() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'mainVolR' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainVolR() {
      mainVolR = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainVolY' field.
      * @return The value.
      */
    public java.lang.Float getMainVolY() {
      return mainVolY;
    }

    /**
      * Sets the value of the 'mainVolY' field.
      * @param value The value of 'mainVolY'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainVolY(java.lang.Float value) {
      validate(fields()[26], value);
      this.mainVolY = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'mainVolY' field has been set.
      * @return True if the 'mainVolY' field has been set, false otherwise.
      */
    public boolean hasMainVolY() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'mainVolY' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainVolY() {
      mainVolY = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainVolB' field.
      * @return The value.
      */
    public java.lang.Float getMainVolB() {
      return mainVolB;
    }

    /**
      * Sets the value of the 'mainVolB' field.
      * @param value The value of 'mainVolB'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainVolB(java.lang.Float value) {
      validate(fields()[27], value);
      this.mainVolB = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'mainVolB' field has been set.
      * @return True if the 'mainVolB' field has been set, false otherwise.
      */
    public boolean hasMainVolB() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'mainVolB' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainVolB() {
      mainVolB = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainCurrRY' field.
      * @return The value.
      */
    public java.lang.Float getMainCurrRY() {
      return mainCurrRY;
    }

    /**
      * Sets the value of the 'mainCurrRY' field.
      * @param value The value of 'mainCurrRY'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainCurrRY(java.lang.Float value) {
      validate(fields()[28], value);
      this.mainCurrRY = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'mainCurrRY' field has been set.
      * @return True if the 'mainCurrRY' field has been set, false otherwise.
      */
    public boolean hasMainCurrRY() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'mainCurrRY' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainCurrRY() {
      mainCurrRY = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainCurrYB' field.
      * @return The value.
      */
    public java.lang.Float getMainCurrYB() {
      return mainCurrYB;
    }

    /**
      * Sets the value of the 'mainCurrYB' field.
      * @param value The value of 'mainCurrYB'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainCurrYB(java.lang.Float value) {
      validate(fields()[29], value);
      this.mainCurrYB = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'mainCurrYB' field has been set.
      * @return True if the 'mainCurrYB' field has been set, false otherwise.
      */
    public boolean hasMainCurrYB() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'mainCurrYB' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainCurrYB() {
      mainCurrYB = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainCurrBR' field.
      * @return The value.
      */
    public java.lang.Float getMainCurrBR() {
      return mainCurrBR;
    }

    /**
      * Sets the value of the 'mainCurrBR' field.
      * @param value The value of 'mainCurrBR'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainCurrBR(java.lang.Float value) {
      validate(fields()[30], value);
      this.mainCurrBR = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'mainCurrBR' field has been set.
      * @return True if the 'mainCurrBR' field has been set, false otherwise.
      */
    public boolean hasMainCurrBR() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'mainCurrBR' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainCurrBR() {
      mainCurrBR = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainFreq' field.
      * @return The value.
      */
    public java.lang.Float getMainFreq() {
      return mainFreq;
    }

    /**
      * Sets the value of the 'mainFreq' field.
      * @param value The value of 'mainFreq'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainFreq(java.lang.Float value) {
      validate(fields()[31], value);
      this.mainFreq = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'mainFreq' field has been set.
      * @return True if the 'mainFreq' field has been set, false otherwise.
      */
    public boolean hasMainFreq() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'mainFreq' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainFreq() {
      mainFreq = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'genVolR' field.
      * @return The value.
      */
    public java.lang.Float getGenVolR() {
      return genVolR;
    }

    /**
      * Sets the value of the 'genVolR' field.
      * @param value The value of 'genVolR'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenVolR(java.lang.Float value) {
      validate(fields()[32], value);
      this.genVolR = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'genVolR' field has been set.
      * @return True if the 'genVolR' field has been set, false otherwise.
      */
    public boolean hasGenVolR() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'genVolR' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenVolR() {
      genVolR = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'genVolY' field.
      * @return The value.
      */
    public java.lang.Float getGenVolY() {
      return genVolY;
    }

    /**
      * Sets the value of the 'genVolY' field.
      * @param value The value of 'genVolY'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenVolY(java.lang.Float value) {
      validate(fields()[33], value);
      this.genVolY = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'genVolY' field has been set.
      * @return True if the 'genVolY' field has been set, false otherwise.
      */
    public boolean hasGenVolY() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'genVolY' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenVolY() {
      genVolY = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'genVolB' field.
      * @return The value.
      */
    public java.lang.Float getGenVolB() {
      return genVolB;
    }

    /**
      * Sets the value of the 'genVolB' field.
      * @param value The value of 'genVolB'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenVolB(java.lang.Float value) {
      validate(fields()[34], value);
      this.genVolB = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'genVolB' field has been set.
      * @return True if the 'genVolB' field has been set, false otherwise.
      */
    public boolean hasGenVolB() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'genVolB' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenVolB() {
      genVolB = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'genCurrR' field.
      * @return The value.
      */
    public java.lang.Float getGenCurrR() {
      return genCurrR;
    }

    /**
      * Sets the value of the 'genCurrR' field.
      * @param value The value of 'genCurrR'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenCurrR(java.lang.Float value) {
      validate(fields()[35], value);
      this.genCurrR = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'genCurrR' field has been set.
      * @return True if the 'genCurrR' field has been set, false otherwise.
      */
    public boolean hasGenCurrR() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'genCurrR' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenCurrR() {
      genCurrR = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'genCurrY' field.
      * @return The value.
      */
    public java.lang.Float getGenCurrY() {
      return genCurrY;
    }

    /**
      * Sets the value of the 'genCurrY' field.
      * @param value The value of 'genCurrY'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenCurrY(java.lang.Float value) {
      validate(fields()[36], value);
      this.genCurrY = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'genCurrY' field has been set.
      * @return True if the 'genCurrY' field has been set, false otherwise.
      */
    public boolean hasGenCurrY() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'genCurrY' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenCurrY() {
      genCurrY = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'genCurrB' field.
      * @return The value.
      */
    public java.lang.Float getGenCurrB() {
      return genCurrB;
    }

    /**
      * Sets the value of the 'genCurrB' field.
      * @param value The value of 'genCurrB'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenCurrB(java.lang.Float value) {
      validate(fields()[37], value);
      this.genCurrB = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'genCurrB' field has been set.
      * @return True if the 'genCurrB' field has been set, false otherwise.
      */
    public boolean hasGenCurrB() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'genCurrB' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenCurrB() {
      genCurrB = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'genFreq' field.
      * @return The value.
      */
    public java.lang.Float getGenFreq() {
      return genFreq;
    }

    /**
      * Sets the value of the 'genFreq' field.
      * @param value The value of 'genFreq'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenFreq(java.lang.Float value) {
      validate(fields()[38], value);
      this.genFreq = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'genFreq' field has been set.
      * @return True if the 'genFreq' field has been set, false otherwise.
      */
    public boolean hasGenFreq() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'genFreq' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenFreq() {
      genFreq = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'genPower' field.
      * @return The value.
      */
    public java.lang.Float getGenPower() {
      return genPower;
    }

    /**
      * Sets the value of the 'genPower' field.
      * @param value The value of 'genPower'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenPower(java.lang.Float value) {
      validate(fields()[39], value);
      this.genPower = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'genPower' field has been set.
      * @return True if the 'genPower' field has been set, false otherwise.
      */
    public boolean hasGenPower() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'genPower' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenPower() {
      genPower = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'svrVol' field.
      * @return The value.
      */
    public java.lang.Float getSvrVol() {
      return svrVol;
    }

    /**
      * Sets the value of the 'svrVol' field.
      * @param value The value of 'svrVol'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSvrVol(java.lang.Float value) {
      validate(fields()[40], value);
      this.svrVol = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'svrVol' field has been set.
      * @return True if the 'svrVol' field has been set, false otherwise.
      */
    public boolean hasSvrVol() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'svrVol' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSvrVol() {
      svrVol = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'svrCurr' field.
      * @return The value.
      */
    public java.lang.Float getSvrCurr() {
      return svrCurr;
    }

    /**
      * Sets the value of the 'svrCurr' field.
      * @param value The value of 'svrCurr'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSvrCurr(java.lang.Float value) {
      validate(fields()[41], value);
      this.svrCurr = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'svrCurr' field has been set.
      * @return True if the 'svrCurr' field has been set, false otherwise.
      */
    public boolean hasSvrCurr() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'svrCurr' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSvrCurr() {
      svrCurr = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'battDod' field.
      * @return The value.
      */
    public java.lang.Float getBattDod() {
      return battDod;
    }

    /**
      * Sets the value of the 'battDod' field.
      * @param value The value of 'battDod'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattDod(java.lang.Float value) {
      validate(fields()[42], value);
      this.battDod = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'battDod' field has been set.
      * @return True if the 'battDod' field has been set, false otherwise.
      */
    public boolean hasBattDod() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'battDod' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattDod() {
      battDod = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'battSoc' field.
      * @return The value.
      */
    public java.lang.Float getBattSoc() {
      return battSoc;
    }

    /**
      * Sets the value of the 'battSoc' field.
      * @param value The value of 'battSoc'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattSoc(java.lang.Float value) {
      validate(fields()[43], value);
      this.battSoc = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'battSoc' field has been set.
      * @return True if the 'battSoc' field has been set, false otherwise.
      */
    public boolean hasBattSoc() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'battSoc' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattSoc() {
      battSoc = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'shelRoomTemp' field.
      * @return The value.
      */
    public java.lang.Float getShelRoomTemp() {
      return shelRoomTemp;
    }

    /**
      * Sets the value of the 'shelRoomTemp' field.
      * @param value The value of 'shelRoomTemp'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setShelRoomTemp(java.lang.Float value) {
      validate(fields()[44], value);
      this.shelRoomTemp = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'shelRoomTemp' field has been set.
      * @return True if the 'shelRoomTemp' field has been set, false otherwise.
      */
    public boolean hasShelRoomTemp() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'shelRoomTemp' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearShelRoomTemp() {
      shelRoomTemp = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'shelBattTemp' field.
      * @return The value.
      */
    public java.lang.Float getShelBattTemp() {
      return shelBattTemp;
    }

    /**
      * Sets the value of the 'shelBattTemp' field.
      * @param value The value of 'shelBattTemp'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setShelBattTemp(java.lang.Float value) {
      validate(fields()[45], value);
      this.shelBattTemp = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'shelBattTemp' field has been set.
      * @return True if the 'shelBattTemp' field has been set, false otherwise.
      */
    public boolean hasShelBattTemp() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'shelBattTemp' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearShelBattTemp() {
      shelBattTemp = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'genFuel' field.
      * @return The value.
      */
    public java.lang.Float getGenFuel() {
      return genFuel;
    }

    /**
      * Sets the value of the 'genFuel' field.
      * @param value The value of 'genFuel'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenFuel(java.lang.Float value) {
      validate(fields()[46], value);
      this.genFuel = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'genFuel' field has been set.
      * @return True if the 'genFuel' field has been set, false otherwise.
      */
    public boolean hasGenFuel() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'genFuel' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenFuel() {
      genFuel = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'genBattVol' field.
      * @return The value.
      */
    public java.lang.Float getGenBattVol() {
      return genBattVol;
    }

    /**
      * Sets the value of the 'genBattVol' field.
      * @param value The value of 'genBattVol'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setGenBattVol(java.lang.Float value) {
      validate(fields()[47], value);
      this.genBattVol = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'genBattVol' field has been set.
      * @return True if the 'genBattVol' field has been set, false otherwise.
      */
    public boolean hasGenBattVol() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'genBattVol' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearGenBattVol() {
      genBattVol = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getMainRunHrs() {
      return mainRunHrs;
    }

    /**
      * Sets the value of the 'mainRunHrs' field.
      * @param value The value of 'mainRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setMainRunHrs(java.lang.Float value) {
      validate(fields()[48], value);
      this.mainRunHrs = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'mainRunHrs' field has been set.
      * @return True if the 'mainRunHrs' field has been set, false otherwise.
      */
    public boolean hasMainRunHrs() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'mainRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearMainRunHrs() {
      mainRunHrs = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'dgTotRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getDgTotRunHrs() {
      return dgTotRunHrs;
    }

    /**
      * Sets the value of the 'dgTotRunHrs' field.
      * @param value The value of 'dgTotRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setDgTotRunHrs(java.lang.Float value) {
      validate(fields()[49], value);
      this.dgTotRunHrs = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'dgTotRunHrs' field has been set.
      * @return True if the 'dgTotRunHrs' field has been set, false otherwise.
      */
    public boolean hasDgTotRunHrs() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'dgTotRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearDgTotRunHrs() {
      dgTotRunHrs = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'dgAutoRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getDgAutoRunHrs() {
      return dgAutoRunHrs;
    }

    /**
      * Sets the value of the 'dgAutoRunHrs' field.
      * @param value The value of 'dgAutoRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setDgAutoRunHrs(java.lang.Float value) {
      validate(fields()[50], value);
      this.dgAutoRunHrs = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'dgAutoRunHrs' field has been set.
      * @return True if the 'dgAutoRunHrs' field has been set, false otherwise.
      */
    public boolean hasDgAutoRunHrs() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'dgAutoRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearDgAutoRunHrs() {
      dgAutoRunHrs = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'dgManRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getDgManRunHrs() {
      return dgManRunHrs;
    }

    /**
      * Sets the value of the 'dgManRunHrs' field.
      * @param value The value of 'dgManRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setDgManRunHrs(java.lang.Float value) {
      validate(fields()[51], value);
      this.dgManRunHrs = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'dgManRunHrs' field has been set.
      * @return True if the 'dgManRunHrs' field has been set, false otherwise.
      */
    public boolean hasDgManRunHrs() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'dgManRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearDgManRunHrs() {
      dgManRunHrs = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'battRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getBattRunHrs() {
      return battRunHrs;
    }

    /**
      * Sets the value of the 'battRunHrs' field.
      * @param value The value of 'battRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattRunHrs(java.lang.Float value) {
      validate(fields()[52], value);
      this.battRunHrs = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'battRunHrs' field has been set.
      * @return True if the 'battRunHrs' field has been set, false otherwise.
      */
    public boolean hasBattRunHrs() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'battRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattRunHrs() {
      battRunHrs = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'solRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getSolRunHrs() {
      return solRunHrs;
    }

    /**
      * Sets the value of the 'solRunHrs' field.
      * @param value The value of 'solRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSolRunHrs(java.lang.Float value) {
      validate(fields()[53], value);
      this.solRunHrs = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'solRunHrs' field has been set.
      * @return True if the 'solRunHrs' field has been set, false otherwise.
      */
    public boolean hasSolRunHrs() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'solRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSolRunHrs() {
      solRunHrs = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'windRunHrs' field.
      * @return The value.
      */
    public java.lang.Float getWindRunHrs() {
      return windRunHrs;
    }

    /**
      * Sets the value of the 'windRunHrs' field.
      * @param value The value of 'windRunHrs'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setWindRunHrs(java.lang.Float value) {
      validate(fields()[54], value);
      this.windRunHrs = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'windRunHrs' field has been set.
      * @return True if the 'windRunHrs' field has been set, false otherwise.
      */
    public boolean hasWindRunHrs() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'windRunHrs' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearWindRunHrs() {
      windRunHrs = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'battChgCycCnt' field.
      * @return The value.
      */
    public java.lang.Float getBattChgCycCnt() {
      return battChgCycCnt;
    }

    /**
      * Sets the value of the 'battChgCycCnt' field.
      * @param value The value of 'battChgCycCnt'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattChgCycCnt(java.lang.Float value) {
      validate(fields()[55], value);
      this.battChgCycCnt = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'battChgCycCnt' field has been set.
      * @return True if the 'battChgCycCnt' field has been set, false otherwise.
      */
    public boolean hasBattChgCycCnt() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'battChgCycCnt' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattChgCycCnt() {
      battChgCycCnt = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'battDisChgCycCnt' field.
      * @return The value.
      */
    public java.lang.Float getBattDisChgCycCnt() {
      return battDisChgCycCnt;
    }

    /**
      * Sets the value of the 'battDisChgCycCnt' field.
      * @param value The value of 'battDisChgCycCnt'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattDisChgCycCnt(java.lang.Float value) {
      validate(fields()[56], value);
      this.battDisChgCycCnt = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'battDisChgCycCnt' field has been set.
      * @return True if the 'battDisChgCycCnt' field has been set, false otherwise.
      */
    public boolean hasBattDisChgCycCnt() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'battDisChgCycCnt' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattDisChgCycCnt() {
      battDisChgCycCnt = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'totRectEnergy' field.
      * @return The value.
      */
    public java.lang.Float getTotRectEnergy() {
      return totRectEnergy;
    }

    /**
      * Sets the value of the 'totRectEnergy' field.
      * @param value The value of 'totRectEnergy'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setTotRectEnergy(java.lang.Float value) {
      validate(fields()[57], value);
      this.totRectEnergy = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'totRectEnergy' field has been set.
      * @return True if the 'totRectEnergy' field has been set, false otherwise.
      */
    public boolean hasTotRectEnergy() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'totRectEnergy' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearTotRectEnergy() {
      totRectEnergy = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipMainKwh' field.
      * @return The value.
      */
    public java.lang.Float getIpMainKwh() {
      return ipMainKwh;
    }

    /**
      * Sets the value of the 'ipMainKwh' field.
      * @param value The value of 'ipMainKwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setIpMainKwh(java.lang.Float value) {
      validate(fields()[58], value);
      this.ipMainKwh = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'ipMainKwh' field has been set.
      * @return True if the 'ipMainKwh' field has been set, false otherwise.
      */
    public boolean hasIpMainKwh() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'ipMainKwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearIpMainKwh() {
      ipMainKwh = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'dgEnerKwh' field.
      * @return The value.
      */
    public java.lang.Float getDgEnerKwh() {
      return dgEnerKwh;
    }

    /**
      * Sets the value of the 'dgEnerKwh' field.
      * @param value The value of 'dgEnerKwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setDgEnerKwh(java.lang.Float value) {
      validate(fields()[59], value);
      this.dgEnerKwh = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'dgEnerKwh' field has been set.
      * @return True if the 'dgEnerKwh' field has been set, false otherwise.
      */
    public boolean hasDgEnerKwh() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'dgEnerKwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearDgEnerKwh() {
      dgEnerKwh = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'battEnerKwh' field.
      * @return The value.
      */
    public java.lang.Float getBattEnerKwh() {
      return battEnerKwh;
    }

    /**
      * Sets the value of the 'battEnerKwh' field.
      * @param value The value of 'battEnerKwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setBattEnerKwh(java.lang.Float value) {
      validate(fields()[60], value);
      this.battEnerKwh = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'battEnerKwh' field has been set.
      * @return True if the 'battEnerKwh' field has been set, false otherwise.
      */
    public boolean hasBattEnerKwh() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'battEnerKwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearBattEnerKwh() {
      battEnerKwh = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'solEnerKwh' field.
      * @return The value.
      */
    public java.lang.Float getSolEnerKwh() {
      return solEnerKwh;
    }

    /**
      * Sets the value of the 'solEnerKwh' field.
      * @param value The value of 'solEnerKwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setSolEnerKwh(java.lang.Float value) {
      validate(fields()[61], value);
      this.solEnerKwh = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'solEnerKwh' field has been set.
      * @return True if the 'solEnerKwh' field has been set, false otherwise.
      */
    public boolean hasSolEnerKwh() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'solEnerKwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearSolEnerKwh() {
      solEnerKwh = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'winEnerKwn' field.
      * @return The value.
      */
    public java.lang.Float getWinEnerKwn() {
      return winEnerKwn;
    }

    /**
      * Sets the value of the 'winEnerKwn' field.
      * @param value The value of 'winEnerKwn'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setWinEnerKwn(java.lang.Float value) {
      validate(fields()[62], value);
      this.winEnerKwn = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'winEnerKwn' field has been set.
      * @return True if the 'winEnerKwn' field has been set, false otherwise.
      */
    public boolean hasWinEnerKwn() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'winEnerKwn' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearWinEnerKwn() {
      winEnerKwn = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'load1Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad1Kwh() {
      return load1Kwh;
    }

    /**
      * Sets the value of the 'load1Kwh' field.
      * @param value The value of 'load1Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad1Kwh(java.lang.Float value) {
      validate(fields()[63], value);
      this.load1Kwh = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'load1Kwh' field has been set.
      * @return True if the 'load1Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad1Kwh() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'load1Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad1Kwh() {
      load1Kwh = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'load2Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad2Kwh() {
      return load2Kwh;
    }

    /**
      * Sets the value of the 'load2Kwh' field.
      * @param value The value of 'load2Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad2Kwh(java.lang.Float value) {
      validate(fields()[64], value);
      this.load2Kwh = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'load2Kwh' field has been set.
      * @return True if the 'load2Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad2Kwh() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'load2Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad2Kwh() {
      load2Kwh = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'load3Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad3Kwh() {
      return load3Kwh;
    }

    /**
      * Sets the value of the 'load3Kwh' field.
      * @param value The value of 'load3Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad3Kwh(java.lang.Float value) {
      validate(fields()[65], value);
      this.load3Kwh = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'load3Kwh' field has been set.
      * @return True if the 'load3Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad3Kwh() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'load3Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad3Kwh() {
      load3Kwh = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'load4Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad4Kwh() {
      return load4Kwh;
    }

    /**
      * Sets the value of the 'load4Kwh' field.
      * @param value The value of 'load4Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad4Kwh(java.lang.Float value) {
      validate(fields()[66], value);
      this.load4Kwh = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'load4Kwh' field has been set.
      * @return True if the 'load4Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad4Kwh() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'load4Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad4Kwh() {
      load4Kwh = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'load5Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad5Kwh() {
      return load5Kwh;
    }

    /**
      * Sets the value of the 'load5Kwh' field.
      * @param value The value of 'load5Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad5Kwh(java.lang.Float value) {
      validate(fields()[67], value);
      this.load5Kwh = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'load5Kwh' field has been set.
      * @return True if the 'load5Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad5Kwh() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'load5Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad5Kwh() {
      load5Kwh = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'load6Kwh' field.
      * @return The value.
      */
    public java.lang.Float getLoad6Kwh() {
      return load6Kwh;
    }

    /**
      * Sets the value of the 'load6Kwh' field.
      * @param value The value of 'load6Kwh'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setLoad6Kwh(java.lang.Float value) {
      validate(fields()[68], value);
      this.load6Kwh = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'load6Kwh' field has been set.
      * @return True if the 'load6Kwh' field has been set, false otherwise.
      */
    public boolean hasLoad6Kwh() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'load6Kwh' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearLoad6Kwh() {
      load6Kwh = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'totLoadEnergy' field.
      * @return The value.
      */
    public java.lang.Float getTotLoadEnergy() {
      return totLoadEnergy;
    }

    /**
      * Sets the value of the 'totLoadEnergy' field.
      * @param value The value of 'totLoadEnergy'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder setTotLoadEnergy(java.lang.Float value) {
      validate(fields()[69], value);
      this.totLoadEnergy = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'totLoadEnergy' field has been set.
      * @return True if the 'totLoadEnergy' field has been set, false otherwise.
      */
    public boolean hasTotLoadEnergy() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'totLoadEnergy' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.DeviceTelemetry.Builder clearTotLoadEnergy() {
      totLoadEnergy = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeviceTelemetry build() {
      try {
        DeviceTelemetry record = new DeviceTelemetry();
        record.faultPeriodic = fieldSetFlags()[0] ? this.faultPeriodic : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.commMode = fieldSetFlags()[1] ? this.commMode : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.swVersion = fieldSetFlags()[2] ? this.swVersion : (java.lang.CharSequence) defaultValue(fields()[2], record.getConversion(2));
        record.protVersion = fieldSetFlags()[3] ? this.protVersion : (java.lang.CharSequence) defaultValue(fields()[3], record.getConversion(3));
        record.serialNo = fieldSetFlags()[4] ? this.serialNo : (java.lang.CharSequence) defaultValue(fields()[4], record.getConversion(4));
        record.dataBytes = fieldSetFlags()[5] ? this.dataBytes : (java.lang.Integer) defaultValue(fields()[5], record.getConversion(5));
        record.siteId = fieldSetFlags()[6] ? this.siteId : (java.lang.CharSequence) defaultValue(fields()[6], record.getConversion(6));
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[7], record.getConversion(7));
        record.alarm = fieldSetFlags()[8] ? this.alarm : (java.lang.CharSequence) defaultValue(fields()[8], record.getConversion(8));
        record.status = fieldSetFlags()[9] ? this.status : (java.lang.CharSequence) defaultValue(fields()[9], record.getConversion(9));
        record.rectifierPower = fieldSetFlags()[10] ? this.rectifierPower : (java.lang.Float) defaultValue(fields()[10], record.getConversion(10));
        record.rectifierVolt = fieldSetFlags()[11] ? this.rectifierVolt : (java.lang.Float) defaultValue(fields()[11], record.getConversion(11));
        record.battCapacity = fieldSetFlags()[12] ? this.battCapacity : (java.lang.Float) defaultValue(fields()[12], record.getConversion(12));
        record.battCurrent = fieldSetFlags()[13] ? this.battCurrent : (java.lang.Integer) defaultValue(fields()[13], record.getConversion(13));
        record.rectCurrent = fieldSetFlags()[14] ? this.rectCurrent : (java.lang.Float) defaultValue(fields()[14], record.getConversion(14));
        record.solCurrent = fieldSetFlags()[15] ? this.solCurrent : (java.lang.Float) defaultValue(fields()[15], record.getConversion(15));
        record.windCurrent = fieldSetFlags()[16] ? this.windCurrent : (java.lang.Float) defaultValue(fields()[16], record.getConversion(16));
        record.battVolDc = fieldSetFlags()[17] ? this.battVolDc : (java.lang.Float) defaultValue(fields()[17], record.getConversion(17));
        record.totLoadCurr = fieldSetFlags()[18] ? this.totLoadCurr : (java.lang.Float) defaultValue(fields()[18], record.getConversion(18));
        record.loadCurr1 = fieldSetFlags()[19] ? this.loadCurr1 : (java.lang.Float) defaultValue(fields()[19], record.getConversion(19));
        record.loadCurr2 = fieldSetFlags()[20] ? this.loadCurr2 : (java.lang.Float) defaultValue(fields()[20], record.getConversion(20));
        record.loadCurr3 = fieldSetFlags()[21] ? this.loadCurr3 : (java.lang.Float) defaultValue(fields()[21], record.getConversion(21));
        record.loadCurr4 = fieldSetFlags()[22] ? this.loadCurr4 : (java.lang.Float) defaultValue(fields()[22], record.getConversion(22));
        record.loadCurr5 = fieldSetFlags()[23] ? this.loadCurr5 : (java.lang.Float) defaultValue(fields()[23], record.getConversion(23));
        record.loadCurr6 = fieldSetFlags()[24] ? this.loadCurr6 : (java.lang.Float) defaultValue(fields()[24], record.getConversion(24));
        record.mainVolR = fieldSetFlags()[25] ? this.mainVolR : (java.lang.Float) defaultValue(fields()[25], record.getConversion(25));
        record.mainVolY = fieldSetFlags()[26] ? this.mainVolY : (java.lang.Float) defaultValue(fields()[26], record.getConversion(26));
        record.mainVolB = fieldSetFlags()[27] ? this.mainVolB : (java.lang.Float) defaultValue(fields()[27], record.getConversion(27));
        record.mainCurrRY = fieldSetFlags()[28] ? this.mainCurrRY : (java.lang.Float) defaultValue(fields()[28], record.getConversion(28));
        record.mainCurrYB = fieldSetFlags()[29] ? this.mainCurrYB : (java.lang.Float) defaultValue(fields()[29], record.getConversion(29));
        record.mainCurrBR = fieldSetFlags()[30] ? this.mainCurrBR : (java.lang.Float) defaultValue(fields()[30], record.getConversion(30));
        record.mainFreq = fieldSetFlags()[31] ? this.mainFreq : (java.lang.Float) defaultValue(fields()[31], record.getConversion(31));
        record.genVolR = fieldSetFlags()[32] ? this.genVolR : (java.lang.Float) defaultValue(fields()[32], record.getConversion(32));
        record.genVolY = fieldSetFlags()[33] ? this.genVolY : (java.lang.Float) defaultValue(fields()[33], record.getConversion(33));
        record.genVolB = fieldSetFlags()[34] ? this.genVolB : (java.lang.Float) defaultValue(fields()[34], record.getConversion(34));
        record.genCurrR = fieldSetFlags()[35] ? this.genCurrR : (java.lang.Float) defaultValue(fields()[35], record.getConversion(35));
        record.genCurrY = fieldSetFlags()[36] ? this.genCurrY : (java.lang.Float) defaultValue(fields()[36], record.getConversion(36));
        record.genCurrB = fieldSetFlags()[37] ? this.genCurrB : (java.lang.Float) defaultValue(fields()[37], record.getConversion(37));
        record.genFreq = fieldSetFlags()[38] ? this.genFreq : (java.lang.Float) defaultValue(fields()[38], record.getConversion(38));
        record.genPower = fieldSetFlags()[39] ? this.genPower : (java.lang.Float) defaultValue(fields()[39], record.getConversion(39));
        record.svrVol = fieldSetFlags()[40] ? this.svrVol : (java.lang.Float) defaultValue(fields()[40], record.getConversion(40));
        record.svrCurr = fieldSetFlags()[41] ? this.svrCurr : (java.lang.Float) defaultValue(fields()[41], record.getConversion(41));
        record.battDod = fieldSetFlags()[42] ? this.battDod : (java.lang.Float) defaultValue(fields()[42], record.getConversion(42));
        record.battSoc = fieldSetFlags()[43] ? this.battSoc : (java.lang.Float) defaultValue(fields()[43], record.getConversion(43));
        record.shelRoomTemp = fieldSetFlags()[44] ? this.shelRoomTemp : (java.lang.Float) defaultValue(fields()[44], record.getConversion(44));
        record.shelBattTemp = fieldSetFlags()[45] ? this.shelBattTemp : (java.lang.Float) defaultValue(fields()[45], record.getConversion(45));
        record.genFuel = fieldSetFlags()[46] ? this.genFuel : (java.lang.Float) defaultValue(fields()[46], record.getConversion(46));
        record.genBattVol = fieldSetFlags()[47] ? this.genBattVol : (java.lang.Float) defaultValue(fields()[47], record.getConversion(47));
        record.mainRunHrs = fieldSetFlags()[48] ? this.mainRunHrs : (java.lang.Float) defaultValue(fields()[48], record.getConversion(48));
        record.dgTotRunHrs = fieldSetFlags()[49] ? this.dgTotRunHrs : (java.lang.Float) defaultValue(fields()[49], record.getConversion(49));
        record.dgAutoRunHrs = fieldSetFlags()[50] ? this.dgAutoRunHrs : (java.lang.Float) defaultValue(fields()[50], record.getConversion(50));
        record.dgManRunHrs = fieldSetFlags()[51] ? this.dgManRunHrs : (java.lang.Float) defaultValue(fields()[51], record.getConversion(51));
        record.battRunHrs = fieldSetFlags()[52] ? this.battRunHrs : (java.lang.Float) defaultValue(fields()[52], record.getConversion(52));
        record.solRunHrs = fieldSetFlags()[53] ? this.solRunHrs : (java.lang.Float) defaultValue(fields()[53], record.getConversion(53));
        record.windRunHrs = fieldSetFlags()[54] ? this.windRunHrs : (java.lang.Float) defaultValue(fields()[54], record.getConversion(54));
        record.battChgCycCnt = fieldSetFlags()[55] ? this.battChgCycCnt : (java.lang.Float) defaultValue(fields()[55], record.getConversion(55));
        record.battDisChgCycCnt = fieldSetFlags()[56] ? this.battDisChgCycCnt : (java.lang.Float) defaultValue(fields()[56], record.getConversion(56));
        record.totRectEnergy = fieldSetFlags()[57] ? this.totRectEnergy : (java.lang.Float) defaultValue(fields()[57], record.getConversion(57));
        record.ipMainKwh = fieldSetFlags()[58] ? this.ipMainKwh : (java.lang.Float) defaultValue(fields()[58], record.getConversion(58));
        record.dgEnerKwh = fieldSetFlags()[59] ? this.dgEnerKwh : (java.lang.Float) defaultValue(fields()[59], record.getConversion(59));
        record.battEnerKwh = fieldSetFlags()[60] ? this.battEnerKwh : (java.lang.Float) defaultValue(fields()[60], record.getConversion(60));
        record.solEnerKwh = fieldSetFlags()[61] ? this.solEnerKwh : (java.lang.Float) defaultValue(fields()[61], record.getConversion(61));
        record.winEnerKwn = fieldSetFlags()[62] ? this.winEnerKwn : (java.lang.Float) defaultValue(fields()[62], record.getConversion(62));
        record.load1Kwh = fieldSetFlags()[63] ? this.load1Kwh : (java.lang.Float) defaultValue(fields()[63], record.getConversion(63));
        record.load2Kwh = fieldSetFlags()[64] ? this.load2Kwh : (java.lang.Float) defaultValue(fields()[64], record.getConversion(64));
        record.load3Kwh = fieldSetFlags()[65] ? this.load3Kwh : (java.lang.Float) defaultValue(fields()[65], record.getConversion(65));
        record.load4Kwh = fieldSetFlags()[66] ? this.load4Kwh : (java.lang.Float) defaultValue(fields()[66], record.getConversion(66));
        record.load5Kwh = fieldSetFlags()[67] ? this.load5Kwh : (java.lang.Float) defaultValue(fields()[67], record.getConversion(67));
        record.load6Kwh = fieldSetFlags()[68] ? this.load6Kwh : (java.lang.Float) defaultValue(fields()[68], record.getConversion(68));
        record.totLoadEnergy = fieldSetFlags()[69] ? this.totLoadEnergy : (java.lang.Float) defaultValue(fields()[69], record.getConversion(69));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeviceTelemetry>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeviceTelemetry>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeviceTelemetry>
    READER$ = (org.apache.avro.io.DatumReader<DeviceTelemetry>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
